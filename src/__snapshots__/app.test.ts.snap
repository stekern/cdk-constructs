// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`BasicAuthBucket should match snapshot 1`] = `
{
  "Mappings": {
    "AWSCloudFrontPartitionHostedZoneIdMap": {
      "aws": {
        "zoneId": "Z2FDTNDATAQYW2",
      },
      "aws-cn": {
        "zoneId": "Z3RFFRIM2A3IF5",
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "BasicAuthBucketARecord59EEBD32": {
      "Properties": {
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "BasicAuthBucketDistribution0ED17201",
              "DomainName",
            ],
          },
          "HostedZoneId": {
            "Fn::FindInMap": [
              "AWSCloudFrontPartitionHostedZoneIdMap",
              {
                "Ref": "AWS::Partition",
              },
              "zoneId",
            ],
          },
        },
        "HostedZoneId": "/hostedzone/ABCDEF12345678",
        "Name": "protected.example.com.",
        "Type": "A",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "BasicAuthBucketCloudFrontOriginAccessIdentity209C978F": {
      "Properties": {
        "CloudFrontOriginAccessIdentityConfig": {
          "Comment": "Allows CloudFront to reach the bucket",
        },
      },
      "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
    },
    "BasicAuthBucketDistribution0ED17201": {
      "Properties": {
        "DistributionConfig": {
          "Aliases": [
            "protected.example.com",
          ],
          "DefaultCacheBehavior": {
            "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
            "Compress": true,
            "LambdaFunctionAssociations": [
              {
                "EventType": "viewer-request",
                "IncludeBody": false,
                "LambdaFunctionARN": {
                  "Ref": "LambdaCurrentVersion<sha256-placeholder>",
                },
              },
            ],
            "TargetOriginId": "StackBasicAuthBucketDistributionOrigin13DFEB9E5",
            "ViewerProtocolPolicy": "redirect-to-https",
          },
          "Enabled": true,
          "HttpVersion": "http2",
          "IPV6Enabled": true,
          "Origins": [
            {
              "DomainName": {
                "Fn::GetAtt": [
                  "BasicAuthBucketProtectedBucketBEC962D5",
                  "RegionalDomainName",
                ],
              },
              "Id": "StackBasicAuthBucketDistributionOrigin13DFEB9E5",
              "S3OriginConfig": {
                "OriginAccessIdentity": {
                  "Fn::Join": [
                    "",
                    [
                      "origin-access-identity/cloudfront/",
                      {
                        "Ref": "BasicAuthBucketCloudFrontOriginAccessIdentity209C978F",
                      },
                    ],
                  ],
                },
              },
            },
          ],
          "PriceClass": "PriceClass_100",
          "ViewerCertificate": {
            "AcmCertificateArn": {
              "Ref": "Certificate4E7ABB08",
            },
            "MinimumProtocolVersion": "TLSv1.2_2021",
            "SslSupportMethod": "sni-only",
          },
        },
      },
      "Type": "AWS::CloudFront::Distribution",
    },
    "BasicAuthBucketFn36598CC5": {
      "DependsOn": [
        "BasicAuthBucketFnServiceRoleDefaultPolicy727039F9",
        "BasicAuthBucketFnServiceRole62C21A6F",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-us-east-1",
          },
          "S3Key": "<sha256-placeholder>.zip",
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "BasicAuthBucketFnServiceRole62C21A6F",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 5,
      },
      "Type": "AWS::Lambda::Function",
    },
    "BasicAuthBucketFnLogRetention46F4A5F4": {
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "BasicAuthBucketFn36598CC5",
              },
            ],
          ],
        },
        "RetentionInDays": 30,
        "ServiceToken": {
          "Fn::GetAtt": [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
            "Arn",
          ],
        },
      },
      "Type": "Custom::LogRetention",
    },
    "BasicAuthBucketFnServiceRole62C21A6F": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "edgelambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BasicAuthBucketFnServiceRoleDefaultPolicy727039F9": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":secretsmanager:us-east-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":secret:my-secret-??????",
                  ],
                ],
              },
            },
            {
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:logs:*:*:log-group:/aws/lambda/us-east-1.*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "BasicAuthBucketFnServiceRoleDefaultPolicy727039F9",
        "Roles": [
          {
            "Ref": "BasicAuthBucketFnServiceRole62C21A6F",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "BasicAuthBucketProtectedBucketBEC962D5": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AccessControl": "Private",
        "OwnershipControls": {
          "Rules": [
            {
              "ObjectOwnership": "BucketOwnerEnforced",
            },
          ],
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "BasicAuthBucketProtectedBucketPolicyB59DA491": {
      "Properties": {
        "Bucket": {
          "Ref": "BasicAuthBucketProtectedBucketBEC962D5",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Principal": {
                "CanonicalUser": {
                  "Fn::GetAtt": [
                    "BasicAuthBucketCloudFrontOriginAccessIdentity209C978F",
                    "S3CanonicalUserId",
                  ],
                },
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "BasicAuthBucketProtectedBucketBEC962D5",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "Certificate4E7ABB08": {
      "Properties": {
        "DomainName": "*.example.com",
        "DomainValidationOptions": [
          {
            "DomainName": "*.example.com",
            "HostedZoneId": "/hostedzone/ABCDEF12345678",
          },
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stack/Certificate",
          },
        ],
        "ValidationMethod": "DNS",
      },
      "Type": "AWS::CertificateManager::Certificate",
    },
    "LambdaCurrentVersion<sha256-placeholder>": {
      "Properties": {
        "FunctionName": {
          "Ref": "BasicAuthBucketFn36598CC5",
        },
      },
      "Type": "AWS::Lambda::Version",
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A": {
      "DependsOn": [
        "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
        "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-us-east-1",
          },
          "S3Key": "<sha256-placeholder>.zip",
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:PutRetentionPolicy",
                "logs:DeleteRetentionPolicy",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
        "Roles": [
          {
            "Ref": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`CloudFrontedHttpApi should match snapshot 1`] = `
{
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "AppApiABD8BF37": {
      "Properties": {
        "Name": "Api",
        "ProtocolType": "HTTP",
      },
      "Type": "AWS::ApiGatewayV2::Api",
    },
    "AppApiDefaultStage608B359B": {
      "Properties": {
        "ApiId": {
          "Ref": "AppApiABD8BF37",
        },
        "AutoDeploy": true,
        "StageName": "$default",
      },
      "Type": "AWS::ApiGatewayV2::Stage",
    },
    "AppAuthorizer494A5F6C": {
      "Properties": {
        "ApiId": {
          "Ref": "AppApiABD8BF37",
        },
        "AuthorizerPayloadFormatVersion": "2.0",
        "AuthorizerResultTtlInSeconds": 3600,
        "AuthorizerType": "REQUEST",
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:aws:apigateway:",
              {
                "Ref": "AWS::Region",
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "AppAuthorizerLambda4B8BEC7B",
                  "Arn",
                ],
              },
              "/invocations",
            ],
          ],
        },
        "EnableSimpleResponses": true,
        "IdentitySource": [
          {
            "Fn::Join": [
              "",
              [
                "$request.header.x-cftoken-{{resolve:secretsmanager:",
                {
                  "Ref": "AppTokenSecret89DE82EF",
                },
                ":SecretString:::}}",
              ],
            ],
          },
        ],
        "Name": "Authorizer",
      },
      "Type": "AWS::ApiGatewayV2::Authorizer",
    },
    "AppAuthorizerLambda4B8BEC7B": {
      "DependsOn": [
        "AppAuthorizerLambdaServiceRoleFF5389DA",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = async () => ({ isAuthorized: true })",
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "AppAuthorizerLambdaServiceRoleFF5389DA",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "AppAuthorizerLambdaGrantInvoke6E572BD1": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AppAuthorizerLambda4B8BEC7B",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "AppApiABD8BF37",
              },
              "/authorizers/",
              {
                "Ref": "AppAuthorizer494A5F6C",
              },
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "AppAuthorizerLambdaServiceRoleFF5389DA": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "AppDistribution3FB407A1": {
      "Properties": {
        "DistributionConfig": {
          "DefaultCacheBehavior": {
            "AllowedMethods": [
              "GET",
              "HEAD",
              "OPTIONS",
              "PUT",
              "PATCH",
              "POST",
              "DELETE",
            ],
            "CachePolicyId": "4135ea2d-6df8-44a3-9df3-4b5a84be39ad",
            "Compress": true,
            "TargetOriginId": "StackAppDistributionOrigin1F598BFC4",
            "ViewerProtocolPolicy": "redirect-to-https",
          },
          "Enabled": true,
          "HttpVersion": "http2",
          "IPV6Enabled": true,
          "Origins": [
            {
              "CustomOriginConfig": {
                "OriginProtocolPolicy": "https-only",
                "OriginSSLProtocols": [
                  "TLSv1.2",
                ],
              },
              "DomainName": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "AppApiABD8BF37",
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region",
                    },
                    ".amazonaws.com",
                  ],
                ],
              },
              "Id": "StackAppDistributionOrigin1F598BFC4",
              "OriginCustomHeaders": [
                {
                  "HeaderName": {
                    "Fn::Join": [
                      "",
                      [
                        "x-cftoken-{{resolve:secretsmanager:",
                        {
                          "Ref": "AppTokenSecret89DE82EF",
                        },
                        ":SecretString:::}}",
                      ],
                    ],
                  },
                  "HeaderValue": "ok",
                },
              ],
            },
          ],
        },
      },
      "Type": "AWS::CloudFront::Distribution",
    },
    "AppTokenSecret89DE82EF": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "GenerateSecretString": {
          "ExcludeLowercase": false,
          "ExcludeNumbers": false,
          "ExcludePunctuation": true,
          "ExcludeUppercase": true,
          "IncludeSpace": false,
          "PasswordLength": 64,
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`CloudFrontedHttpApi should match snapshot with custom domain 1`] = `
{
  "Mappings": {
    "AWSCloudFrontPartitionHostedZoneIdMap": {
      "aws": {
        "zoneId": "Z2FDTNDATAQYW2",
      },
      "aws-cn": {
        "zoneId": "Z3RFFRIM2A3IF5",
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "AppARecordF6D6571C": {
      "Properties": {
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "AppDistribution3FB407A1",
              "DomainName",
            ],
          },
          "HostedZoneId": {
            "Fn::FindInMap": [
              "AWSCloudFrontPartitionHostedZoneIdMap",
              {
                "Ref": "AWS::Partition",
              },
              "zoneId",
            ],
          },
        },
        "HostedZoneId": "/hostedzone/ABCDEF12345678",
        "Name": "example.com.",
        "Type": "A",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "AppApiABD8BF37": {
      "Properties": {
        "Name": "Api",
        "ProtocolType": "HTTP",
      },
      "Type": "AWS::ApiGatewayV2::Api",
    },
    "AppApiDefaultStage608B359B": {
      "Properties": {
        "ApiId": {
          "Ref": "AppApiABD8BF37",
        },
        "AutoDeploy": true,
        "StageName": "$default",
      },
      "Type": "AWS::ApiGatewayV2::Stage",
    },
    "AppAuthorizer494A5F6C": {
      "Properties": {
        "ApiId": {
          "Ref": "AppApiABD8BF37",
        },
        "AuthorizerPayloadFormatVersion": "2.0",
        "AuthorizerResultTtlInSeconds": 3600,
        "AuthorizerType": "REQUEST",
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "AppAuthorizerLambda4B8BEC7B",
                  "Arn",
                ],
              },
              "/invocations",
            ],
          ],
        },
        "EnableSimpleResponses": true,
        "IdentitySource": [
          {
            "Fn::Join": [
              "",
              [
                "$request.header.x-cftoken-{{resolve:secretsmanager:",
                {
                  "Ref": "AppTokenSecret89DE82EF",
                },
                ":SecretString:::}}",
              ],
            ],
          },
        ],
        "Name": "Authorizer",
      },
      "Type": "AWS::ApiGatewayV2::Authorizer",
    },
    "AppAuthorizerLambda4B8BEC7B": {
      "DependsOn": [
        "AppAuthorizerLambdaServiceRoleFF5389DA",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = async () => ({ isAuthorized: true })",
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "AppAuthorizerLambdaServiceRoleFF5389DA",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "AppAuthorizerLambdaGrantInvoke6E572BD1": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AppAuthorizerLambda4B8BEC7B",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:us-east-1:",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "AppApiABD8BF37",
              },
              "/authorizers/",
              {
                "Ref": "AppAuthorizer494A5F6C",
              },
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "AppAuthorizerLambdaServiceRoleFF5389DA": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "AppDistribution3FB407A1": {
      "Properties": {
        "DistributionConfig": {
          "Aliases": [
            "example.com",
          ],
          "DefaultCacheBehavior": {
            "AllowedMethods": [
              "GET",
              "HEAD",
              "OPTIONS",
              "PUT",
              "PATCH",
              "POST",
              "DELETE",
            ],
            "CachePolicyId": "4135ea2d-6df8-44a3-9df3-4b5a84be39ad",
            "Compress": true,
            "TargetOriginId": "StackAppDistributionOrigin1F598BFC4",
            "ViewerProtocolPolicy": "redirect-to-https",
          },
          "Enabled": true,
          "HttpVersion": "http2",
          "IPV6Enabled": true,
          "Origins": [
            {
              "CustomOriginConfig": {
                "OriginProtocolPolicy": "https-only",
                "OriginSSLProtocols": [
                  "TLSv1.2",
                ],
              },
              "DomainName": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "AppApiABD8BF37",
                    },
                    ".execute-api.us-east-1.amazonaws.com",
                  ],
                ],
              },
              "Id": "StackAppDistributionOrigin1F598BFC4",
              "OriginCustomHeaders": [
                {
                  "HeaderName": {
                    "Fn::Join": [
                      "",
                      [
                        "x-cftoken-{{resolve:secretsmanager:",
                        {
                          "Ref": "AppTokenSecret89DE82EF",
                        },
                        ":SecretString:::}}",
                      ],
                    ],
                  },
                  "HeaderValue": "ok",
                },
              ],
            },
          ],
          "ViewerCertificate": {
            "AcmCertificateArn": {
              "Ref": "Certificate4E7ABB08",
            },
            "MinimumProtocolVersion": "TLSv1.2_2021",
            "SslSupportMethod": "sni-only",
          },
        },
      },
      "Type": "AWS::CloudFront::Distribution",
    },
    "AppTokenSecret89DE82EF": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "GenerateSecretString": {
          "ExcludeLowercase": false,
          "ExcludeNumbers": false,
          "ExcludePunctuation": true,
          "ExcludeUppercase": true,
          "IncludeSpace": false,
          "PasswordLength": 64,
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "Certificate4E7ABB08": {
      "Properties": {
        "DomainName": "*.example.com",
        "DomainValidationOptions": [
          {
            "DomainName": "*.example.com",
            "HostedZoneId": "/hostedzone/ABCDEF12345678",
          },
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stack/Certificate",
          },
        ],
        "ValidationMethod": "DNS",
      },
      "Type": "AWS::CertificateManager::Certificate",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`DollarStoreAppRunner should match snapshot 1`] = `
{
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "AppApiABD8BF37": {
      "Properties": {
        "Description": "Created in stack 'Stack'",
        "Name": "Api",
        "ProtocolType": "HTTP",
      },
      "Type": "AWS::ApiGatewayV2::Api",
    },
    "AppApiANYappproxy66FA2EA1": {
      "Properties": {
        "ApiId": {
          "Ref": "AppApiABD8BF37",
        },
        "AuthorizationType": "NONE",
        "RouteKey": "ANY /app/{proxy+}",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "AppApiANYappproxyServiceDiscoveryIntegration9E147E6D",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "AppApiANYappproxyServiceDiscoveryIntegration9E147E6D": {
      "Properties": {
        "ApiId": {
          "Ref": "AppApiABD8BF37",
        },
        "ConnectionId": {
          "Ref": "AppVpcLink6B2E2262",
        },
        "ConnectionType": "VPC_LINK",
        "IntegrationMethod": "ANY",
        "IntegrationType": "HTTP_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "AppServiceCloudmapService828333A4",
            "Arn",
          ],
        },
        "PayloadFormatVersion": "1.0",
      },
      "Type": "AWS::ApiGatewayV2::Integration",
    },
    "AppApiDefaultStage608B359B": {
      "Properties": {
        "ApiId": {
          "Ref": "AppApiABD8BF37",
        },
        "AutoDeploy": true,
        "StageName": "$default",
      },
      "Type": "AWS::ApiGatewayV2::Stage",
    },
    "AppApiGET978BB214": {
      "Properties": {
        "ApiId": {
          "Ref": "AppApiABD8BF37",
        },
        "AuthorizationType": "NONE",
        "RouteKey": "GET /",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "AppApiGETGatewayIntegrationDF3A0CAA",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "AppApiGETGatewayIntegrationDF3A0CAA": {
      "Properties": {
        "ApiId": {
          "Ref": "AppApiABD8BF37",
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "AppGatewayLambdaBF8B6949",
            "Arn",
          ],
        },
        "PayloadFormatVersion": "2.0",
      },
      "Type": "AWS::ApiGatewayV2::Integration",
    },
    "AppApiGETGatewayIntegrationPermission24DF621F": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AppGatewayLambdaBF8B6949",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "AppApiABD8BF37",
              },
              "/*/*/",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "AppApiGETstatus1E36C68A": {
      "Properties": {
        "ApiId": {
          "Ref": "AppApiABD8BF37",
        },
        "AuthorizationType": "NONE",
        "RouteKey": "GET /status",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "AppApiGETGatewayIntegrationDF3A0CAA",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "AppApiGETstatusGatewayIntegrationPermission5F9E30E6": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AppGatewayLambdaBF8B6949",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "AppApiABD8BF37",
              },
              "/*/*/status",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "AppCloudMapNamespaceF860E93C": {
      "Properties": {
        "Name": "Stack",
        "Vpc": {
          "Ref": "AppVpc759390F5",
        },
      },
      "Type": "AWS::ServiceDiscovery::PrivateDnsNamespace",
    },
    "AppCluster68CC0559": {
      "Properties": {
        "ClusterSettings": [
          {
            "Name": "containerInsights",
            "Value": "enabled",
          },
        ],
      },
      "Type": "AWS::ECS::Cluster",
    },
    "AppGatewayLambdaBF8B6949": {
      "DependsOn": [
        "AppGatewayLambdaServiceRoleDefaultPolicy33CDFC48",
        "AppGatewayLambdaServiceRole7B836B2D",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "<sha256-placeholder>.zip",
        },
        "Environment": {
          "Variables": {
            "SERVICE_ID": {
              "Fn::GetAtt": [
                "AppServiceCloudmapService828333A4",
                "Id",
              ],
            },
          },
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "AppGatewayLambdaServiceRole7B836B2D",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "AppGatewayLambdaServiceRole7B836B2D": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "AppGatewayLambdaServiceRoleDefaultPolicy33CDFC48": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "servicediscovery:GetInstancesHealthStatus",
              "Condition": {
                "ArnEquals": {
                  "servicediscovery:ServiceArn": [
                    {
                      "Fn::GetAtt": [
                        "AppServiceCloudmapService828333A4",
                        "Arn",
                      ],
                    },
                  ],
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "AppGatewayLambdaServiceRoleDefaultPolicy33CDFC48",
        "Roles": [
          {
            "Ref": "AppGatewayLambdaServiceRole7B836B2D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "AppScalableTarget07674B5B": {
      "Properties": {
        "MaxCapacity": 1,
        "MinCapacity": 0,
        "ResourceId": {
          "Fn::Join": [
            "",
            [
              "service/",
              {
                "Ref": "AppCluster68CC0559",
              },
              "/",
              {
                "Fn::GetAtt": [
                  "AppService606B9134",
                  "Name",
                ],
              },
            ],
          ],
        },
        "RoleARN": {
          "Fn::GetAtt": [
            "AppScalableTargetRole971EC468",
            "Arn",
          ],
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs",
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
    },
    "AppScalableTargetRole971EC468": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "application-autoscaling.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "AppScaleInPolicyUpperAlarmD0D1E189": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "AppScaleInPolicyUpperPolicy88EFA9D4",
          },
        ],
        "AlarmDescription": "Upper threshold scaling alarm",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods": 1,
        "Metrics": [
          {
            "Expression": "IF(FILL(requests, 0) == 0 && FILL(tasks, 0) == 1, 1, 0)",
            "Id": "expr_1",
          },
          {
            "Id": "requests",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "ApiId",
                    "Value": {
                      "Ref": "AppApiABD8BF37",
                    },
                  },
                ],
                "MetricName": "Count",
                "Namespace": "AWS/ApiGateway",
              },
              "Period": 1800,
              "Stat": "SampleCount",
            },
            "ReturnData": false,
          },
          {
            "Id": "tasks",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "ClusterName",
                    "Value": {
                      "Ref": "AppCluster68CC0559",
                    },
                  },
                  {
                    "Name": "ServiceName",
                    "Value": {
                      "Fn::GetAtt": [
                        "AppService606B9134",
                        "Name",
                      ],
                    },
                  },
                ],
                "MetricName": "RunningTaskCount",
                "Namespace": "ECS/ContainerInsights",
              },
              "Period": 1800,
              "Stat": "Maximum",
            },
            "ReturnData": false,
          },
        ],
        "Threshold": 1,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "AppScaleInPolicyUpperPolicy88EFA9D4": {
      "Properties": {
        "PolicyName": "StackAppScaleInPolicyUpperPolicyD92E5844",
        "PolicyType": "StepScaling",
        "ScalingTargetId": {
          "Ref": "AppScalableTarget07674B5B",
        },
        "StepScalingPolicyConfiguration": {
          "AdjustmentType": "ChangeInCapacity",
          "MetricAggregationType": "Maximum",
          "StepAdjustments": [
            {
              "MetricIntervalLowerBound": 0,
              "ScalingAdjustment": -1,
            },
          ],
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "AppScaleOutPolicyUpperAlarm4A0B2562": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "AppScaleOutPolicyUpperPolicyEA91DFC6",
          },
        ],
        "AlarmDescription": "Upper threshold scaling alarm",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods": 1,
        "Metrics": [
          {
            "Expression": "IF(FILL(requests, 0) > 0 && FILL(tasks, 0) == 0, 1, 0)",
            "Id": "expr_1",
          },
          {
            "Id": "requests",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "ApiId",
                    "Value": {
                      "Ref": "AppApiABD8BF37",
                    },
                  },
                ],
                "MetricName": "Count",
                "Namespace": "AWS/ApiGateway",
              },
              "Period": 60,
              "Stat": "SampleCount",
            },
            "ReturnData": false,
          },
          {
            "Id": "tasks",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "ClusterName",
                    "Value": {
                      "Ref": "AppCluster68CC0559",
                    },
                  },
                  {
                    "Name": "ServiceName",
                    "Value": {
                      "Fn::GetAtt": [
                        "AppService606B9134",
                        "Name",
                      ],
                    },
                  },
                ],
                "MetricName": "RunningTaskCount",
                "Namespace": "ECS/ContainerInsights",
              },
              "Period": 60,
              "Stat": "Maximum",
            },
            "ReturnData": false,
          },
        ],
        "Threshold": 1,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "AppScaleOutPolicyUpperPolicyEA91DFC6": {
      "Properties": {
        "PolicyName": "StackAppScaleOutPolicyUpperPolicy7C40ECBC",
        "PolicyType": "StepScaling",
        "ScalingTargetId": {
          "Ref": "AppScalableTarget07674B5B",
        },
        "StepScalingPolicyConfiguration": {
          "AdjustmentType": "ChangeInCapacity",
          "MetricAggregationType": "Maximum",
          "StepAdjustments": [
            {
              "MetricIntervalLowerBound": 0,
              "ScalingAdjustment": 1,
            },
          ],
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "AppService606B9134": {
      "DependsOn": [
        "AppTaskDefinitionTaskRole9E8A9437",
      ],
      "Properties": {
        "CapacityProviderStrategy": [
          {
            "CapacityProvider": "FARGATE_SPOT",
            "Weight": 1,
          },
        ],
        "Cluster": {
          "Ref": "AppCluster68CC0559",
        },
        "DeploymentConfiguration": {
          "Alarms": {
            "AlarmNames": [],
            "Enable": false,
            "Rollback": false,
          },
          "MaximumPercent": 100,
          "MinimumHealthyPercent": 0,
        },
        "DesiredCount": 0,
        "EnableECSManagedTags": false,
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "AssignPublicIp": "ENABLED",
            "SecurityGroups": [
              {
                "Fn::GetAtt": [
                  "AppServiceSecurityGroupCA9DE597",
                  "GroupId",
                ],
              },
            ],
            "Subnets": [
              {
                "Ref": "AppVpcPublicSubnet1Subnet9D7B62FE",
              },
              {
                "Ref": "AppVpcPublicSubnet2SubnetFB035A53",
              },
            ],
          },
        },
        "ServiceRegistries": [
          {
            "ContainerName": "main",
            "ContainerPort": 80,
            "RegistryArn": {
              "Fn::GetAtt": [
                "AppServiceCloudmapService828333A4",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": {
          "Ref": "AppTaskDefinitionCA96C95D",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "AppServiceCloudmapService828333A4": {
      "DependsOn": [
        "AppTaskDefinitionTaskRole9E8A9437",
      ],
      "Properties": {
        "DnsConfig": {
          "DnsRecords": [
            {
              "TTL": 60,
              "Type": "SRV",
            },
          ],
          "NamespaceId": {
            "Fn::GetAtt": [
              "AppCloudMapNamespaceF860E93C",
              "Id",
            ],
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "HealthCheckCustomConfig": {
          "FailureThreshold": 1,
        },
        "NamespaceId": {
          "Fn::GetAtt": [
            "AppCloudMapNamespaceF860E93C",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "AppServiceSecurityGroupCA9DE597": {
      "Properties": {
        "GroupDescription": "Stack/App/ServiceSecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": {
          "Ref": "AppVpc759390F5",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "AppServiceSecurityGroupfromStackAppVpcLinkSecurityGroup1EBFAEEE804E75753D": {
      "Properties": {
        "Description": "from StackAppVpcLinkSecurityGroup1EBFAEEE:80",
        "FromPort": 80,
        "GroupId": {
          "Fn::GetAtt": [
            "AppServiceSecurityGroupCA9DE597",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "AppVpcLinkSecurityGroup614B26C8",
            "GroupId",
          ],
        },
        "ToPort": 80,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "AppTaskDefinitionCA96C95D": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Essential": true,
            "Image": "nginx:latest",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "AppTaskDefinitionmainLogGroup5DD519A4",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "main",
            "PortMappings": [
              {
                "ContainerPort": 80,
                "Protocol": "tcp",
              },
            ],
            "StopTimeout": 120,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "AppTaskDefinitionExecutionRole74450CA1",
            "Arn",
          ],
        },
        "Family": "StackAppTaskDefinition45A0D15D",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "AppTaskDefinitionTaskRole9E8A9437",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "AppTaskDefinitionExecutionRole74450CA1": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "AppTaskDefinitionExecutionRoleDefaultPolicyEE606390": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "AppTaskDefinitionmainLogGroup5DD519A4",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "AppTaskDefinitionExecutionRoleDefaultPolicyEE606390",
        "Roles": [
          {
            "Ref": "AppTaskDefinitionExecutionRole74450CA1",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "AppTaskDefinitionTaskRole9E8A9437": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "AppTaskDefinitionmainLogGroup5DD519A4": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 14,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "AppVpc759390F5": {
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stack/App/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "AppVpcIGW71761E00": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stack/App/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "AppVpcIsolatedSubnet1RouteTableA9333661": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stack/App/Vpc/IsolatedSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "AppVpc759390F5",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "AppVpcIsolatedSubnet1RouteTableAssociation39ABF26A": {
      "Properties": {
        "RouteTableId": {
          "Ref": "AppVpcIsolatedSubnet1RouteTableA9333661",
        },
        "SubnetId": {
          "Ref": "AppVpcIsolatedSubnet1Subnet96BB36BE",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "AppVpcIsolatedSubnet1Subnet96BB36BE": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.128.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Isolated",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Isolated",
          },
          {
            "Key": "Name",
            "Value": "Stack/App/Vpc/IsolatedSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "AppVpc759390F5",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "AppVpcIsolatedSubnet2RouteTableADA573AA": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stack/App/Vpc/IsolatedSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "AppVpc759390F5",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "AppVpcIsolatedSubnet2RouteTableAssociationD1041D00": {
      "Properties": {
        "RouteTableId": {
          "Ref": "AppVpcIsolatedSubnet2RouteTableADA573AA",
        },
        "SubnetId": {
          "Ref": "AppVpcIsolatedSubnet2Subnet7A399AFD",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "AppVpcIsolatedSubnet2Subnet7A399AFD": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.192.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Isolated",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Isolated",
          },
          {
            "Key": "Name",
            "Value": "Stack/App/Vpc/IsolatedSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "AppVpc759390F5",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "AppVpcLink6B2E2262": {
      "Properties": {
        "Name": "StackAppVpcLink12D12B89",
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "AppVpcLinkSecurityGroup614B26C8",
              "GroupId",
            ],
          },
        ],
        "SubnetIds": [
          {
            "Ref": "AppVpcPublicSubnet1Subnet9D7B62FE",
          },
          {
            "Ref": "AppVpcPublicSubnet2SubnetFB035A53",
          },
        ],
      },
      "Type": "AWS::ApiGatewayV2::VpcLink",
    },
    "AppVpcLinkSecurityGroup614B26C8": {
      "Properties": {
        "GroupDescription": "Stack/App/VpcLinkSecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": {
          "Ref": "AppVpc759390F5",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "AppVpcPublicSubnet1DefaultRouteDB775FF1": {
      "DependsOn": [
        "AppVpcVPCGW001AC0BD",
      ],
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "AppVpcIGW71761E00",
        },
        "RouteTableId": {
          "Ref": "AppVpcPublicSubnet1RouteTable854C2D89",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "AppVpcPublicSubnet1RouteTable854C2D89": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stack/App/Vpc/PublicSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "AppVpc759390F5",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "AppVpcPublicSubnet1RouteTableAssociation57E0F6D2": {
      "Properties": {
        "RouteTableId": {
          "Ref": "AppVpcPublicSubnet1RouteTable854C2D89",
        },
        "SubnetId": {
          "Ref": "AppVpcPublicSubnet1Subnet9D7B62FE",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "AppVpcPublicSubnet1Subnet9D7B62FE": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.0.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          {
            "Key": "Name",
            "Value": "Stack/App/Vpc/PublicSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "AppVpc759390F5",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "AppVpcPublicSubnet2DefaultRouteB04FAC4C": {
      "DependsOn": [
        "AppVpcVPCGW001AC0BD",
      ],
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "AppVpcIGW71761E00",
        },
        "RouteTableId": {
          "Ref": "AppVpcPublicSubnet2RouteTableEAE626AF",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "AppVpcPublicSubnet2RouteTableAssociation6984E433": {
      "Properties": {
        "RouteTableId": {
          "Ref": "AppVpcPublicSubnet2RouteTableEAE626AF",
        },
        "SubnetId": {
          "Ref": "AppVpcPublicSubnet2SubnetFB035A53",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "AppVpcPublicSubnet2RouteTableEAE626AF": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stack/App/Vpc/PublicSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "AppVpc759390F5",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "AppVpcPublicSubnet2SubnetFB035A53": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.64.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          {
            "Key": "Name",
            "Value": "Stack/App/Vpc/PublicSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "AppVpc759390F5",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "AppVpcVPCGW001AC0BD": {
      "Properties": {
        "InternetGatewayId": {
          "Ref": "AppVpcIGW71761E00",
        },
        "VpcId": {
          "Ref": "AppVpc759390F5",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
    "ClusterEB0386A7": {
      "Type": "AWS::ECS::Cluster",
    },
    "ClusterVpcFAA3CEDF": {
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stack/Cluster/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "ClusterVpcIGW1E358A6E": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stack/Cluster/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "ClusterVpcPrivateSubnet1DefaultRoute3B4D40DD": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "ClusterVpcPublicSubnet1NATGateway0693C346",
        },
        "RouteTableId": {
          "Ref": "ClusterVpcPrivateSubnet1RouteTable5AAEDA3F",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "ClusterVpcPrivateSubnet1RouteTable5AAEDA3F": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stack/Cluster/Vpc/PrivateSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "ClusterVpcFAA3CEDF",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "ClusterVpcPrivateSubnet1RouteTableAssociation9B8A88D9": {
      "Properties": {
        "RouteTableId": {
          "Ref": "ClusterVpcPrivateSubnet1RouteTable5AAEDA3F",
        },
        "SubnetId": {
          "Ref": "ClusterVpcPrivateSubnet1SubnetA4EB481A",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "ClusterVpcPrivateSubnet1SubnetA4EB481A": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.128.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          {
            "Key": "Name",
            "Value": "Stack/Cluster/Vpc/PrivateSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "ClusterVpcFAA3CEDF",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "ClusterVpcPrivateSubnet2DefaultRoute011666AF": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "ClusterVpcPublicSubnet2NATGateway00B24686",
        },
        "RouteTableId": {
          "Ref": "ClusterVpcPrivateSubnet2RouteTable73064A66",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "ClusterVpcPrivateSubnet2RouteTable73064A66": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stack/Cluster/Vpc/PrivateSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "ClusterVpcFAA3CEDF",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "ClusterVpcPrivateSubnet2RouteTableAssociationFB21349E": {
      "Properties": {
        "RouteTableId": {
          "Ref": "ClusterVpcPrivateSubnet2RouteTable73064A66",
        },
        "SubnetId": {
          "Ref": "ClusterVpcPrivateSubnet2SubnetBD1ECB6E",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "ClusterVpcPrivateSubnet2SubnetBD1ECB6E": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.192.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          {
            "Key": "Name",
            "Value": "Stack/Cluster/Vpc/PrivateSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "ClusterVpcFAA3CEDF",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "ClusterVpcPublicSubnet1DefaultRoute62DA4B4B": {
      "DependsOn": [
        "ClusterVpcVPCGW47AC17E9",
      ],
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "ClusterVpcIGW1E358A6E",
        },
        "RouteTableId": {
          "Ref": "ClusterVpcPublicSubnet1RouteTable5594A636",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "ClusterVpcPublicSubnet1EIP433C56EE": {
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stack/Cluster/Vpc/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "ClusterVpcPublicSubnet1NATGateway0693C346": {
      "DependsOn": [
        "ClusterVpcPublicSubnet1DefaultRoute62DA4B4B",
        "ClusterVpcPublicSubnet1RouteTableAssociation0FBEF1F4",
      ],
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "ClusterVpcPublicSubnet1EIP433C56EE",
            "AllocationId",
          ],
        },
        "SubnetId": {
          "Ref": "ClusterVpcPublicSubnet1SubnetA9F7E0A5",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stack/Cluster/Vpc/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "ClusterVpcPublicSubnet1RouteTable5594A636": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stack/Cluster/Vpc/PublicSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "ClusterVpcFAA3CEDF",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "ClusterVpcPublicSubnet1RouteTableAssociation0FBEF1F4": {
      "Properties": {
        "RouteTableId": {
          "Ref": "ClusterVpcPublicSubnet1RouteTable5594A636",
        },
        "SubnetId": {
          "Ref": "ClusterVpcPublicSubnet1SubnetA9F7E0A5",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "ClusterVpcPublicSubnet1SubnetA9F7E0A5": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.0.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          {
            "Key": "Name",
            "Value": "Stack/Cluster/Vpc/PublicSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "ClusterVpcFAA3CEDF",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "ClusterVpcPublicSubnet2DefaultRoute97446C8A": {
      "DependsOn": [
        "ClusterVpcVPCGW47AC17E9",
      ],
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "ClusterVpcIGW1E358A6E",
        },
        "RouteTableId": {
          "Ref": "ClusterVpcPublicSubnet2RouteTable7B43F18C",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "ClusterVpcPublicSubnet2EIP203DF3E5": {
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stack/Cluster/Vpc/PublicSubnet2",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "ClusterVpcPublicSubnet2NATGateway00B24686": {
      "DependsOn": [
        "ClusterVpcPublicSubnet2DefaultRoute97446C8A",
        "ClusterVpcPublicSubnet2RouteTableAssociation8446B27D",
      ],
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "ClusterVpcPublicSubnet2EIP203DF3E5",
            "AllocationId",
          ],
        },
        "SubnetId": {
          "Ref": "ClusterVpcPublicSubnet2Subnet059113C4",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stack/Cluster/Vpc/PublicSubnet2",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "ClusterVpcPublicSubnet2RouteTable7B43F18C": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stack/Cluster/Vpc/PublicSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "ClusterVpcFAA3CEDF",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "ClusterVpcPublicSubnet2RouteTableAssociation8446B27D": {
      "Properties": {
        "RouteTableId": {
          "Ref": "ClusterVpcPublicSubnet2RouteTable7B43F18C",
        },
        "SubnetId": {
          "Ref": "ClusterVpcPublicSubnet2Subnet059113C4",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "ClusterVpcPublicSubnet2Subnet059113C4": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.64.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          {
            "Key": "Name",
            "Value": "Stack/Cluster/Vpc/PublicSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "ClusterVpcFAA3CEDF",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "ClusterVpcVPCGW47AC17E9": {
      "Properties": {
        "InternetGatewayId": {
          "Ref": "ClusterVpcIGW1E358A6E",
        },
        "VpcId": {
          "Ref": "ClusterVpcFAA3CEDF",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`GitHubCookieAuth should match snapshot 1`] = `
{
  "Mappings": {
    "LatestNodeRuntimeMap": {
      "af-south-1": {
        "value": "nodejs20.x",
      },
      "ap-east-1": {
        "value": "nodejs20.x",
      },
      "ap-northeast-1": {
        "value": "nodejs20.x",
      },
      "ap-northeast-2": {
        "value": "nodejs20.x",
      },
      "ap-northeast-3": {
        "value": "nodejs20.x",
      },
      "ap-south-1": {
        "value": "nodejs20.x",
      },
      "ap-south-2": {
        "value": "nodejs20.x",
      },
      "ap-southeast-1": {
        "value": "nodejs20.x",
      },
      "ap-southeast-2": {
        "value": "nodejs20.x",
      },
      "ap-southeast-3": {
        "value": "nodejs20.x",
      },
      "ap-southeast-4": {
        "value": "nodejs20.x",
      },
      "ap-southeast-5": {
        "value": "nodejs20.x",
      },
      "ap-southeast-7": {
        "value": "nodejs20.x",
      },
      "ca-central-1": {
        "value": "nodejs20.x",
      },
      "ca-west-1": {
        "value": "nodejs20.x",
      },
      "cn-north-1": {
        "value": "nodejs18.x",
      },
      "cn-northwest-1": {
        "value": "nodejs18.x",
      },
      "eu-central-1": {
        "value": "nodejs20.x",
      },
      "eu-central-2": {
        "value": "nodejs20.x",
      },
      "eu-isoe-west-1": {
        "value": "nodejs18.x",
      },
      "eu-north-1": {
        "value": "nodejs20.x",
      },
      "eu-south-1": {
        "value": "nodejs20.x",
      },
      "eu-south-2": {
        "value": "nodejs20.x",
      },
      "eu-west-1": {
        "value": "nodejs20.x",
      },
      "eu-west-2": {
        "value": "nodejs20.x",
      },
      "eu-west-3": {
        "value": "nodejs20.x",
      },
      "il-central-1": {
        "value": "nodejs20.x",
      },
      "me-central-1": {
        "value": "nodejs20.x",
      },
      "me-south-1": {
        "value": "nodejs20.x",
      },
      "mx-central-1": {
        "value": "nodejs20.x",
      },
      "sa-east-1": {
        "value": "nodejs20.x",
      },
      "us-east-1": {
        "value": "nodejs20.x",
      },
      "us-east-2": {
        "value": "nodejs20.x",
      },
      "us-gov-east-1": {
        "value": "nodejs18.x",
      },
      "us-gov-west-1": {
        "value": "nodejs18.x",
      },
      "us-iso-east-1": {
        "value": "nodejs18.x",
      },
      "us-iso-west-1": {
        "value": "nodejs18.x",
      },
      "us-isob-east-1": {
        "value": "nodejs18.x",
      },
      "us-west-1": {
        "value": "nodejs20.x",
      },
      "us-west-2": {
        "value": "nodejs20.x",
      },
    },
  },
  "Outputs": {
    "ApiEndpoint4F160690": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiF70053CD",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "ApiDeploymentStageprod3EB9684E",
            },
            "/",
          ],
        ],
      },
    },
    "GitHubCookieAuthProxyApiEndpointB8E83712": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "GitHubCookieAuthProxyApi7C85E057",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "GitHubCookieAuthProxyApiDeploymentStageprod1073AD87",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "ApiAccountA18C9B29": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiF70053CD",
      ],
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiCloudWatchRole73EC6FC4",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiCloudWatchRole73EC6FC4": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiDeploymentB17BE62Dbc24e6985dddc8908ea876708611aedf": {
      "DependsOn": [
        "ApiGET9257B917",
      ],
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "ApiF70053CD",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "ApiDeploymentStageprod3EB9684E": {
      "DependsOn": [
        "ApiAccountA18C9B29",
      ],
      "Properties": {
        "DeploymentId": {
          "Ref": "ApiDeploymentB17BE62Dbc24e6985dddc8908ea876708611aedf",
        },
        "RestApiId": {
          "Ref": "ApiF70053CD",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "ApiF70053CD": {
      "Properties": {
        "Name": "Api",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "ApiGET9257B917": {
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "GitHubCookieAuthAuthorizer91D54674",
        },
        "HttpMethod": "GET",
        "Integration": {
          "Type": "MOCK",
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "ApiF70053CD",
            "RootResourceId",
          ],
        },
        "RestApiId": {
          "Ref": "ApiF70053CD",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "Certificate4E7ABB08": {
      "Properties": {
        "DomainName": "*.example.com",
        "DomainValidationOptions": [
          {
            "DomainName": "*.example.com",
            "HostedZoneId": "/hostedzone/ABCDEF12345678",
          },
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stack/Certificate",
          },
        ],
        "ValidationMethod": "DNS",
      },
      "Type": "AWS::CertificateManager::Certificate",
    },
    "ClientCredentialsEC83A0CF": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "GenerateSecretString": {},
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "GitHubCookieAuthAuthorizer91D54674": {
      "Properties": {
        "AuthorizerResultTtlInSeconds": 900,
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Fn::Select": [
                  1,
                  {
                    "Fn::Split": [
                      ":",
                      {
                        "Fn::GetAtt": [
                          "GitHubCookieAuthAuthorizerLambdaAB9AED49",
                          "Arn",
                        ],
                      },
                    ],
                  },
                ],
              },
              ":apigateway:",
              {
                "Fn::Select": [
                  3,
                  {
                    "Fn::Split": [
                      ":",
                      {
                        "Fn::GetAtt": [
                          "GitHubCookieAuthAuthorizerLambdaAB9AED49",
                          "Arn",
                        ],
                      },
                    ],
                  },
                ],
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "GitHubCookieAuthAuthorizerLambdaAB9AED49",
                  "Arn",
                ],
              },
              "/invocations",
            ],
          ],
        },
        "IdentitySource": "method.request.header.Cookie",
        "Name": "StackGitHubCookieAuthAuthorizerB6B3B6C5",
        "RestApiId": {
          "Ref": "ApiF70053CD",
        },
        "Type": "REQUEST",
      },
      "Type": "AWS::ApiGateway::Authorizer",
    },
    "GitHubCookieAuthAuthorizerLambdaAB9AED49": {
      "DependsOn": [
        "GitHubCookieAuthAuthorizerLambdaServiceRoleDefaultPolicy2665F2BC",
        "GitHubCookieAuthAuthorizerLambdaServiceRole9D289F96",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "<sha256-placeholder>.zip",
        },
        "Environment": {
          "Variables": {
            "ACCESS_CONTROL": "{"type":"USERNAME","whitelist":["user"]}",
            "ALLOWED_ORIGIN": "https://app.example.com",
            "AUTHORIZER_CACHE_TABLE_NAME": {
              "Ref": "GitHubCookieAuthCacheTable395CB977",
            },
            "AUTHORIZER_CACHE_TTL": "900",
            "AUTH_COOKIE_ENCRYPTION_KEY_ARN": {
              "Fn::GetAtt": [
                "Key961B73FD",
                "Arn",
              ],
            },
            "AUTH_COOKIE_NAME": "token",
            "GITHUB_APP_ID": "123456",
            "SECRET_NAME": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Fn::Select": [
                      0,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Fn::Select": [
                              6,
                              {
                                "Fn::Split": [
                                  ":",
                                  {
                                    "Ref": "ClientCredentialsEC83A0CF",
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    "Fn::Select": [
                      1,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Fn::Select": [
                              6,
                              {
                                "Fn::Split": [
                                  ":",
                                  {
                                    "Ref": "ClientCredentialsEC83A0CF",
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                ],
              ],
            },
          },
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "GitHubCookieAuthAuthorizerLambdaServiceRole9D289F96",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 10,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "GitHubCookieAuthAuthorizerLambdaLogRetention2CDCE966": {
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "GitHubCookieAuthAuthorizerLambdaAB9AED49",
              },
            ],
          ],
        },
        "RetentionInDays": 30,
        "ServiceToken": {
          "Fn::GetAtt": [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
            "Arn",
          ],
        },
      },
      "Type": "Custom::LogRetention",
    },
    "GitHubCookieAuthAuthorizerLambdaServiceRole9D289F96": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "GitHubCookieAuthAuthorizerLambdaServiceRoleDefaultPolicy2665F2BC": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "GitHubCookieAuthCacheTable395CB977",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "ClientCredentialsEC83A0CF",
              },
            },
            {
              "Action": "kms:Decrypt",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "Key961B73FD",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "GitHubCookieAuthAuthorizerLambdaServiceRoleDefaultPolicy2665F2BC",
        "Roles": [
          {
            "Ref": "GitHubCookieAuthAuthorizerLambdaServiceRole9D289F96",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "GitHubCookieAuthAuthorizerLambdaStackGitHubCookieAuthAuthorizerB6B3B6C5Permissions89FBBD49": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "GitHubCookieAuthAuthorizerLambdaAB9AED49",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiF70053CD",
              },
              "/authorizers/",
              {
                "Ref": "GitHubCookieAuthAuthorizer91D54674",
              },
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "GitHubCookieAuthCacheTable395CB977": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "PK",
            "AttributeType": "S",
          },
          {
            "AttributeName": "SK",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "PK",
            "KeyType": "HASH",
          },
          {
            "AttributeName": "SK",
            "KeyType": "RANGE",
          },
        ],
        "TimeToLiveSpecification": {
          "AttributeName": "ttl",
          "Enabled": true,
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Delete",
    },
    "GitHubCookieAuthCallbackFn6CD3A657": {
      "DependsOn": [
        "GitHubCookieAuthCallbackFnServiceRoleDefaultPolicyC09A6350",
        "GitHubCookieAuthCallbackFnServiceRoleC5B6DFDE",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "<sha256-placeholder>.zip",
        },
        "Environment": {
          "Variables": {
            "AUTH_COOKIE_ATTRIBUTES": "Secure; HttpOnly; SameSite=Strict; Domain=example.com",
            "AUTH_COOKIE_ENCRYPTION_KEY_ARN": {
              "Fn::GetAtt": [
                "Key961B73FD",
                "Arn",
              ],
            },
            "AUTH_COOKIE_NAME": "token",
            "NONCE_COOKIE_NAME": "nonce",
            "REDIRECT_URL": "https://app.example.com",
            "RESPONSE_HEADERS": "{"Access-Control-Allow-Credentials":"true","Access-Control-Allow-Methods":"OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD","Access-Control-Allow-Origin":"https://app.example.com"}",
            "SECRET_NAME": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Fn::Select": [
                      0,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Fn::Select": [
                              6,
                              {
                                "Fn::Split": [
                                  ":",
                                  {
                                    "Ref": "ClientCredentialsEC83A0CF",
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    "Fn::Select": [
                      1,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Fn::Select": [
                              6,
                              {
                                "Fn::Split": [
                                  ":",
                                  {
                                    "Ref": "ClientCredentialsEC83A0CF",
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                ],
              ],
            },
          },
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "GitHubCookieAuthCallbackFnServiceRoleC5B6DFDE",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 10,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "GitHubCookieAuthCallbackFnLogRetention94C18441": {
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "GitHubCookieAuthCallbackFn6CD3A657",
              },
            ],
          ],
        },
        "RetentionInDays": 30,
        "ServiceToken": {
          "Fn::GetAtt": [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
            "Arn",
          ],
        },
      },
      "Type": "Custom::LogRetention",
    },
    "GitHubCookieAuthCallbackFnServiceRoleC5B6DFDE": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "GitHubCookieAuthCallbackFnServiceRoleDefaultPolicyC09A6350": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "ClientCredentialsEC83A0CF",
              },
            },
            {
              "Action": [
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "Key961B73FD",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "GitHubCookieAuthCallbackFnServiceRoleDefaultPolicyC09A6350",
        "Roles": [
          {
            "Ref": "GitHubCookieAuthCallbackFnServiceRoleC5B6DFDE",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "GitHubCookieAuthProxyApi7C85E057": {
      "Properties": {
        "DisableExecuteApiEndpoint": true,
        "EndpointConfiguration": {
          "Types": [
            "EDGE",
          ],
        },
        "Name": "ProxyApi",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "GitHubCookieAuthProxyApiAccountB7DB5672": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "GitHubCookieAuthProxyApi7C85E057",
      ],
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "GitHubCookieAuthProxyApiCloudWatchRoleF133A1FD",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "GitHubCookieAuthProxyApiCloudWatchRoleF133A1FD": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "GitHubCookieAuthProxyApiCustomDomain32B7C305": {
      "Properties": {
        "CertificateArn": {
          "Ref": "Certificate4E7ABB08",
        },
        "DomainName": "auth.example.com",
        "EndpointConfiguration": {
          "Types": [
            "EDGE",
          ],
        },
      },
      "Type": "AWS::ApiGateway::DomainName",
    },
    "GitHubCookieAuthProxyApiCustomDomainMapStackGitHubCookieAuthProxyApi14BE3A90258BBCB2": {
      "Properties": {
        "DomainName": {
          "Ref": "GitHubCookieAuthProxyApiCustomDomain32B7C305",
        },
        "RestApiId": {
          "Ref": "GitHubCookieAuthProxyApi7C85E057",
        },
        "Stage": {
          "Ref": "GitHubCookieAuthProxyApiDeploymentStageprod1073AD87",
        },
      },
      "Type": "AWS::ApiGateway::BasePathMapping",
    },
    "GitHubCookieAuthProxyApiDeployment9A7DE05E8ef94a94173e00061cc747e4b235b18e": {
      "DependsOn": [
        "GitHubCookieAuthProxyApicallbackGET26B31985",
        "GitHubCookieAuthProxyApicallbackOPTIONSEEA60090",
        "GitHubCookieAuthProxyApicallback02B08A52",
        "GitHubCookieAuthProxyApiOPTIONSAA935303",
        "GitHubCookieAuthProxyApirequestGETE5F7FF88",
        "GitHubCookieAuthProxyApirequestOPTIONS05D8CC93",
        "GitHubCookieAuthProxyApirequest6FDC6B46",
      ],
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "GitHubCookieAuthProxyApi7C85E057",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "GitHubCookieAuthProxyApiDeploymentStageprod1073AD87": {
      "DependsOn": [
        "GitHubCookieAuthProxyApiAccountB7DB5672",
      ],
      "Properties": {
        "DeploymentId": {
          "Ref": "GitHubCookieAuthProxyApiDeployment9A7DE05E8ef94a94173e00061cc747e4b235b18e",
        },
        "RestApiId": {
          "Ref": "GitHubCookieAuthProxyApi7C85E057",
        },
        "StageName": "prod",
        "TracingEnabled": true,
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "GitHubCookieAuthProxyApiOPTIONSAA935303": {
      "Properties": {
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
                "method.response.header.Access-Control-Allow-Origin": "'https://app.example.com'",
                "method.response.header.Vary": "'Origin'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Vary": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": {
          "Fn::GetAtt": [
            "GitHubCookieAuthProxyApi7C85E057",
            "RootResourceId",
          ],
        },
        "RestApiId": {
          "Ref": "GitHubCookieAuthProxyApi7C85E057",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "GitHubCookieAuthProxyApicallback02B08A52": {
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "GitHubCookieAuthProxyApi7C85E057",
            "RootResourceId",
          ],
        },
        "PathPart": "callback",
        "RestApiId": {
          "Ref": "GitHubCookieAuthProxyApi7C85E057",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "GitHubCookieAuthProxyApicallbackGET26B31985": {
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GitHubCookieAuthCallbackFn6CD3A657",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": {
          "Ref": "GitHubCookieAuthProxyApicallback02B08A52",
        },
        "RestApiId": {
          "Ref": "GitHubCookieAuthProxyApi7C85E057",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "GitHubCookieAuthProxyApicallbackGETApiPermissionStackGitHubCookieAuthProxyApi14BE3A90GETcallback14A93723": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "GitHubCookieAuthCallbackFn6CD3A657",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "GitHubCookieAuthProxyApi7C85E057",
              },
              "/",
              {
                "Ref": "GitHubCookieAuthProxyApiDeploymentStageprod1073AD87",
              },
              "/GET/callback",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "GitHubCookieAuthProxyApicallbackGETApiPermissionTestStackGitHubCookieAuthProxyApi14BE3A90GETcallback83287BDD": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "GitHubCookieAuthCallbackFn6CD3A657",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "GitHubCookieAuthProxyApi7C85E057",
              },
              "/test-invoke-stage/GET/callback",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "GitHubCookieAuthProxyApicallbackOPTIONSEEA60090": {
      "Properties": {
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
                "method.response.header.Access-Control-Allow-Origin": "'https://app.example.com'",
                "method.response.header.Vary": "'Origin'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Vary": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": {
          "Ref": "GitHubCookieAuthProxyApicallback02B08A52",
        },
        "RestApiId": {
          "Ref": "GitHubCookieAuthProxyApi7C85E057",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "GitHubCookieAuthProxyApirequest6FDC6B46": {
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "GitHubCookieAuthProxyApi7C85E057",
            "RootResourceId",
          ],
        },
        "PathPart": "request",
        "RestApiId": {
          "Ref": "GitHubCookieAuthProxyApi7C85E057",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "GitHubCookieAuthProxyApirequestGETApiPermissionStackGitHubCookieAuthProxyApi14BE3A90GETrequest9EC0572C": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "GitHubCookieAuthRequestLambda670E4A19",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "GitHubCookieAuthProxyApi7C85E057",
              },
              "/",
              {
                "Ref": "GitHubCookieAuthProxyApiDeploymentStageprod1073AD87",
              },
              "/GET/request",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "GitHubCookieAuthProxyApirequestGETApiPermissionTestStackGitHubCookieAuthProxyApi14BE3A90GETrequest7991E520": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "GitHubCookieAuthRequestLambda670E4A19",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "GitHubCookieAuthProxyApi7C85E057",
              },
              "/test-invoke-stage/GET/request",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "GitHubCookieAuthProxyApirequestGETE5F7FF88": {
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GitHubCookieAuthRequestLambda670E4A19",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": {
          "Ref": "GitHubCookieAuthProxyApirequest6FDC6B46",
        },
        "RestApiId": {
          "Ref": "GitHubCookieAuthProxyApi7C85E057",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "GitHubCookieAuthProxyApirequestOPTIONS05D8CC93": {
      "Properties": {
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
                "method.response.header.Access-Control-Allow-Origin": "'https://app.example.com'",
                "method.response.header.Vary": "'Origin'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Vary": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": {
          "Ref": "GitHubCookieAuthProxyApirequest6FDC6B46",
        },
        "RestApiId": {
          "Ref": "GitHubCookieAuthProxyApi7C85E057",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "GitHubCookieAuthRecord5A4D4458": {
      "Properties": {
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "GitHubCookieAuthProxyApiCustomDomain32B7C305",
              "DistributionDomainName",
            ],
          },
          "HostedZoneId": {
            "Fn::GetAtt": [
              "GitHubCookieAuthProxyApiCustomDomain32B7C305",
              "DistributionHostedZoneId",
            ],
          },
        },
        "HostedZoneId": "/hostedzone/ABCDEF12345678",
        "Name": "auth.example.com.",
        "Type": "A",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "GitHubCookieAuthRequestLambda670E4A19": {
      "DependsOn": [
        "GitHubCookieAuthRequestLambdaServiceRoleDefaultPolicy8AB18A0A",
        "GitHubCookieAuthRequestLambdaServiceRoleA6BF3DEF",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "<sha256-placeholder>.zip",
        },
        "Environment": {
          "Variables": {
            "CALLBACK_URL": "https://auth.example.com/callback",
            "NONCE_COOKIE_ATTRIBUTES": "Secure; HttpOnly; SameSite=Lax",
            "NONCE_COOKIE_NAME": "nonce",
            "RESPONSE_HEADERS": "{"Access-Control-Allow-Credentials":"true","Access-Control-Allow-Methods":"OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD","Access-Control-Allow-Origin":"https://app.example.com"}",
            "SECRET_NAME": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Fn::Select": [
                      0,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Fn::Select": [
                              6,
                              {
                                "Fn::Split": [
                                  ":",
                                  {
                                    "Ref": "ClientCredentialsEC83A0CF",
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    "Fn::Select": [
                      1,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Fn::Select": [
                              6,
                              {
                                "Fn::Split": [
                                  ":",
                                  {
                                    "Ref": "ClientCredentialsEC83A0CF",
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                ],
              ],
            },
          },
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "GitHubCookieAuthRequestLambdaServiceRoleA6BF3DEF",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 10,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "GitHubCookieAuthRequestLambdaLogRetentionED7801A8": {
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "GitHubCookieAuthRequestLambda670E4A19",
              },
            ],
          ],
        },
        "RetentionInDays": 30,
        "ServiceToken": {
          "Fn::GetAtt": [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
            "Arn",
          ],
        },
      },
      "Type": "Custom::LogRetention",
    },
    "GitHubCookieAuthRequestLambdaServiceRoleA6BF3DEF": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "GitHubCookieAuthRequestLambdaServiceRoleDefaultPolicy8AB18A0A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "ClientCredentialsEC83A0CF",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "GitHubCookieAuthRequestLambdaServiceRoleDefaultPolicy8AB18A0A",
        "Roles": [
          {
            "Ref": "GitHubCookieAuthRequestLambdaServiceRoleA6BF3DEF",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "Key961B73FD": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "KeyPolicy": {
          "Statement": [
            {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::KMS::Key",
      "UpdateReplacePolicy": "Retain",
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A": {
      "DependsOn": [
        "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
        "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "<sha256-placeholder>.zip",
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
            "Arn",
          ],
        },
        "Runtime": {
          "Fn::FindInMap": [
            "LatestNodeRuntimeMap",
            {
              "Ref": "AWS::Region",
            },
            "value",
          ],
        },
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:PutRetentionPolicy",
                "logs:DeleteRetentionPolicy",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
        "Roles": [
          {
            "Ref": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`GitHubPushWebhookApi should match snapshot 1`] = `
{
  "Mappings": {
    "LatestNodeRuntimeMap": {
      "af-south-1": {
        "value": "nodejs20.x",
      },
      "ap-east-1": {
        "value": "nodejs20.x",
      },
      "ap-northeast-1": {
        "value": "nodejs20.x",
      },
      "ap-northeast-2": {
        "value": "nodejs20.x",
      },
      "ap-northeast-3": {
        "value": "nodejs20.x",
      },
      "ap-south-1": {
        "value": "nodejs20.x",
      },
      "ap-south-2": {
        "value": "nodejs20.x",
      },
      "ap-southeast-1": {
        "value": "nodejs20.x",
      },
      "ap-southeast-2": {
        "value": "nodejs20.x",
      },
      "ap-southeast-3": {
        "value": "nodejs20.x",
      },
      "ap-southeast-4": {
        "value": "nodejs20.x",
      },
      "ap-southeast-5": {
        "value": "nodejs20.x",
      },
      "ap-southeast-7": {
        "value": "nodejs20.x",
      },
      "ca-central-1": {
        "value": "nodejs20.x",
      },
      "ca-west-1": {
        "value": "nodejs20.x",
      },
      "cn-north-1": {
        "value": "nodejs18.x",
      },
      "cn-northwest-1": {
        "value": "nodejs18.x",
      },
      "eu-central-1": {
        "value": "nodejs20.x",
      },
      "eu-central-2": {
        "value": "nodejs20.x",
      },
      "eu-isoe-west-1": {
        "value": "nodejs18.x",
      },
      "eu-north-1": {
        "value": "nodejs20.x",
      },
      "eu-south-1": {
        "value": "nodejs20.x",
      },
      "eu-south-2": {
        "value": "nodejs20.x",
      },
      "eu-west-1": {
        "value": "nodejs20.x",
      },
      "eu-west-2": {
        "value": "nodejs20.x",
      },
      "eu-west-3": {
        "value": "nodejs20.x",
      },
      "il-central-1": {
        "value": "nodejs20.x",
      },
      "me-central-1": {
        "value": "nodejs20.x",
      },
      "me-south-1": {
        "value": "nodejs20.x",
      },
      "mx-central-1": {
        "value": "nodejs20.x",
      },
      "sa-east-1": {
        "value": "nodejs20.x",
      },
      "us-east-1": {
        "value": "nodejs20.x",
      },
      "us-east-2": {
        "value": "nodejs20.x",
      },
      "us-gov-east-1": {
        "value": "nodejs18.x",
      },
      "us-gov-west-1": {
        "value": "nodejs18.x",
      },
      "us-iso-east-1": {
        "value": "nodejs18.x",
      },
      "us-iso-west-1": {
        "value": "nodejs18.x",
      },
      "us-isob-east-1": {
        "value": "nodejs18.x",
      },
      "us-west-1": {
        "value": "nodejs20.x",
      },
      "us-west-2": {
        "value": "nodejs20.x",
      },
    },
  },
  "Outputs": {
    "GitHubPushWebhookApiEndpointA86987D6": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "GitHubPushWebhookApi7BE17FFA",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "GitHubPushWebhookApiDeploymentStageprod63078991",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "Certificate4E7ABB08": {
      "Properties": {
        "DomainName": "*.example.com",
        "DomainValidationOptions": [
          {
            "DomainName": "*.example.com",
            "HostedZoneId": "/hostedzone/ABCDEF12345678",
          },
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stack/Certificate",
          },
        ],
        "ValidationMethod": "DNS",
      },
      "Type": "AWS::CertificateManager::Certificate",
    },
    "GitHubPushWebhookApi7BE17FFA": {
      "Properties": {
        "DisableExecuteApiEndpoint": true,
        "EndpointConfiguration": {
          "Types": [
            "REGIONAL",
          ],
        },
        "Name": "WebhookApi",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "GitHubPushWebhookApiAccount46267DBA": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "GitHubPushWebhookApi7BE17FFA",
      ],
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "GitHubPushWebhookApiCloudWatchRole59C87BB8",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "GitHubPushWebhookApiCloudWatchRole59C87BB8": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "GitHubPushWebhookApiCustomDomainB7329A1B": {
      "Properties": {
        "DomainName": "example.com",
        "EndpointConfiguration": {
          "Types": [
            "REGIONAL",
          ],
        },
        "RegionalCertificateArn": {
          "Ref": "Certificate4E7ABB08",
        },
      },
      "Type": "AWS::ApiGateway::DomainName",
    },
    "GitHubPushWebhookApiCustomDomainMapStackGitHubPushWebhookApi27B2DFF43B421488": {
      "Properties": {
        "DomainName": {
          "Ref": "GitHubPushWebhookApiCustomDomainB7329A1B",
        },
        "RestApiId": {
          "Ref": "GitHubPushWebhookApi7BE17FFA",
        },
        "Stage": {
          "Ref": "GitHubPushWebhookApiDeploymentStageprod63078991",
        },
      },
      "Type": "AWS::ApiGateway::BasePathMapping",
    },
    "GitHubPushWebhookApiDeployment38A0D6D7a526d666ba71267fd573b8b9ce69383f": {
      "DependsOn": [
        "GitHubPushWebhookApiPOSTD06706F0",
      ],
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "GitHubPushWebhookApi7BE17FFA",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "GitHubPushWebhookApiDeploymentStageprod63078991": {
      "DependsOn": [
        "GitHubPushWebhookApiAccount46267DBA",
      ],
      "Properties": {
        "DeploymentId": {
          "Ref": "GitHubPushWebhookApiDeployment38A0D6D7a526d666ba71267fd573b8b9ce69383f",
        },
        "RestApiId": {
          "Ref": "GitHubPushWebhookApi7BE17FFA",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "GitHubPushWebhookApiGitHubPushTable2ECBC1E6": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "PK",
            "AttributeType": "S",
          },
          {
            "AttributeName": "SK",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "PK",
            "KeyType": "HASH",
          },
          {
            "AttributeName": "SK",
            "KeyType": "RANGE",
          },
        ],
        "StreamSpecification": {
          "StreamViewType": "NEW_IMAGE",
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "GitHubPushWebhookApiPOSTApiPermissionStackGitHubPushWebhookApi27B2DFF4POSTF9648FDB": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "GitHubPushWebhookApiWebhookReceiverLambda1342EEC4",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "GitHubPushWebhookApi7BE17FFA",
              },
              "/",
              {
                "Ref": "GitHubPushWebhookApiDeploymentStageprod63078991",
              },
              "/POST/",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "GitHubPushWebhookApiPOSTApiPermissionTestStackGitHubPushWebhookApi27B2DFF4POST1EF2EA52": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "GitHubPushWebhookApiWebhookReceiverLambda1342EEC4",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "GitHubPushWebhookApi7BE17FFA",
              },
              "/test-invoke-stage/POST/",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "GitHubPushWebhookApiPOSTD06706F0": {
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GitHubPushWebhookApiWebhookReceiverLambda1342EEC4",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "GitHubPushWebhookApi7BE17FFA",
            "RootResourceId",
          ],
        },
        "RestApiId": {
          "Ref": "GitHubPushWebhookApi7BE17FFA",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "GitHubPushWebhookApiRecord48F3D76D": {
      "Properties": {
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "GitHubPushWebhookApiCustomDomainB7329A1B",
              "RegionalDomainName",
            ],
          },
          "HostedZoneId": {
            "Fn::GetAtt": [
              "GitHubPushWebhookApiCustomDomainB7329A1B",
              "RegionalHostedZoneId",
            ],
          },
        },
        "HostedZoneId": "/hostedzone/ABCDEF12345678",
        "Name": "example.com.",
        "Type": "A",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "GitHubPushWebhookApiWebhookReceiverLambda1342EEC4": {
      "DependsOn": [
        "GitHubPushWebhookApiWebhookReceiverLambdaServiceRoleDefaultPolicy871B2DF1",
        "GitHubPushWebhookApiWebhookReceiverLambdaServiceRoleB0F7D511",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "<sha256-placeholder>.zip",
        },
        "Environment": {
          "Variables": {
            "SECRET_NAME": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Fn::Select": [
                      0,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Fn::Select": [
                              6,
                              {
                                "Fn::Split": [
                                  ":",
                                  {
                                    "Ref": "SecretA720EF05",
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    "Fn::Select": [
                      1,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Fn::Select": [
                              6,
                              {
                                "Fn::Split": [
                                  ":",
                                  {
                                    "Ref": "SecretA720EF05",
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                ],
              ],
            },
            "TABLE_NAME": {
              "Ref": "GitHubPushWebhookApiGitHubPushTable2ECBC1E6",
            },
          },
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "GitHubPushWebhookApiWebhookReceiverLambdaServiceRoleB0F7D511",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 10,
      },
      "Type": "AWS::Lambda::Function",
    },
    "GitHubPushWebhookApiWebhookReceiverLambdaLogRetention624B6F13": {
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "GitHubPushWebhookApiWebhookReceiverLambda1342EEC4",
              },
            ],
          ],
        },
        "RetentionInDays": 30,
        "ServiceToken": {
          "Fn::GetAtt": [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
            "Arn",
          ],
        },
      },
      "Type": "Custom::LogRetention",
    },
    "GitHubPushWebhookApiWebhookReceiverLambdaServiceRoleB0F7D511": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "GitHubPushWebhookApiWebhookReceiverLambdaServiceRoleDefaultPolicy871B2DF1": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "SecretA720EF05",
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "GitHubPushWebhookApiGitHubPushTable2ECBC1E6",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "GitHubPushWebhookApiWebhookReceiverLambdaServiceRoleDefaultPolicy871B2DF1",
        "Roles": [
          {
            "Ref": "GitHubPushWebhookApiWebhookReceiverLambdaServiceRoleB0F7D511",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A": {
      "DependsOn": [
        "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
        "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "<sha256-placeholder>.zip",
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
            "Arn",
          ],
        },
        "Runtime": {
          "Fn::FindInMap": [
            "LatestNodeRuntimeMap",
            {
              "Ref": "AWS::Region",
            },
            "value",
          ],
        },
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:PutRetentionPolicy",
                "logs:DeleteRetentionPolicy",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
        "Roles": [
          {
            "Ref": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SecretA720EF05": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "Description": "Secret token used for validating webhook requests from GitHub",
        "GenerateSecretString": {},
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`GitHubWorkflowRunWebhookApi should match snapshot 1`] = `
{
  "Mappings": {
    "LatestNodeRuntimeMap": {
      "af-south-1": {
        "value": "nodejs20.x",
      },
      "ap-east-1": {
        "value": "nodejs20.x",
      },
      "ap-northeast-1": {
        "value": "nodejs20.x",
      },
      "ap-northeast-2": {
        "value": "nodejs20.x",
      },
      "ap-northeast-3": {
        "value": "nodejs20.x",
      },
      "ap-south-1": {
        "value": "nodejs20.x",
      },
      "ap-south-2": {
        "value": "nodejs20.x",
      },
      "ap-southeast-1": {
        "value": "nodejs20.x",
      },
      "ap-southeast-2": {
        "value": "nodejs20.x",
      },
      "ap-southeast-3": {
        "value": "nodejs20.x",
      },
      "ap-southeast-4": {
        "value": "nodejs20.x",
      },
      "ap-southeast-5": {
        "value": "nodejs20.x",
      },
      "ap-southeast-7": {
        "value": "nodejs20.x",
      },
      "ca-central-1": {
        "value": "nodejs20.x",
      },
      "ca-west-1": {
        "value": "nodejs20.x",
      },
      "cn-north-1": {
        "value": "nodejs18.x",
      },
      "cn-northwest-1": {
        "value": "nodejs18.x",
      },
      "eu-central-1": {
        "value": "nodejs20.x",
      },
      "eu-central-2": {
        "value": "nodejs20.x",
      },
      "eu-isoe-west-1": {
        "value": "nodejs18.x",
      },
      "eu-north-1": {
        "value": "nodejs20.x",
      },
      "eu-south-1": {
        "value": "nodejs20.x",
      },
      "eu-south-2": {
        "value": "nodejs20.x",
      },
      "eu-west-1": {
        "value": "nodejs20.x",
      },
      "eu-west-2": {
        "value": "nodejs20.x",
      },
      "eu-west-3": {
        "value": "nodejs20.x",
      },
      "il-central-1": {
        "value": "nodejs20.x",
      },
      "me-central-1": {
        "value": "nodejs20.x",
      },
      "me-south-1": {
        "value": "nodejs20.x",
      },
      "mx-central-1": {
        "value": "nodejs20.x",
      },
      "sa-east-1": {
        "value": "nodejs20.x",
      },
      "us-east-1": {
        "value": "nodejs20.x",
      },
      "us-east-2": {
        "value": "nodejs20.x",
      },
      "us-gov-east-1": {
        "value": "nodejs18.x",
      },
      "us-gov-west-1": {
        "value": "nodejs18.x",
      },
      "us-iso-east-1": {
        "value": "nodejs18.x",
      },
      "us-iso-west-1": {
        "value": "nodejs18.x",
      },
      "us-isob-east-1": {
        "value": "nodejs18.x",
      },
      "us-west-1": {
        "value": "nodejs20.x",
      },
      "us-west-2": {
        "value": "nodejs20.x",
      },
    },
  },
  "Outputs": {
    "WebhookApiEndpointA9007BA4": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "WebhookApi6CC9DD23",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "WebhookApiDeploymentStageprod189573F5",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "Certificate4E7ABB08": {
      "Properties": {
        "DomainName": "*.example.com",
        "DomainValidationOptions": [
          {
            "DomainName": "*.example.com",
            "HostedZoneId": "/hostedzone/ABCDEF12345678",
          },
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stack/Certificate",
          },
        ],
        "ValidationMethod": "DNS",
      },
      "Type": "AWS::CertificateManager::Certificate",
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A": {
      "DependsOn": [
        "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
        "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "<sha256-placeholder>.zip",
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
            "Arn",
          ],
        },
        "Runtime": {
          "Fn::FindInMap": [
            "LatestNodeRuntimeMap",
            {
              "Ref": "AWS::Region",
            },
            "value",
          ],
        },
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:PutRetentionPolicy",
                "logs:DeleteRetentionPolicy",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
        "Roles": [
          {
            "Ref": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "TableCD117FA1": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "PK",
            "AttributeType": "S",
          },
          {
            "AttributeName": "SK",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "PK",
            "KeyType": "HASH",
          },
          {
            "AttributeName": "SK",
            "KeyType": "RANGE",
          },
        ],
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "WebhookApi6CC9DD23": {
      "Properties": {
        "DisableExecuteApiEndpoint": true,
        "EndpointConfiguration": {
          "Types": [
            "EDGE",
          ],
        },
        "Name": "WebhookApi",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "WebhookApiANYApiPermissionStackWebhookApi549DBB5EANY531B2DBB": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "WebhookApiWebhookReceiverLambdaE8B7F832",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "WebhookApi6CC9DD23",
              },
              "/",
              {
                "Ref": "WebhookApiDeploymentStageprod189573F5",
              },
              "/*/",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "WebhookApiANYApiPermissionTestStackWebhookApi549DBB5EANYCEEB5218": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "WebhookApiWebhookReceiverLambdaE8B7F832",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "WebhookApi6CC9DD23",
              },
              "/test-invoke-stage/*/",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "WebhookApiANYC724D9C3": {
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "ANY",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "WebhookApiWebhookReceiverLambdaE8B7F832",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "WebhookApi6CC9DD23",
            "RootResourceId",
          ],
        },
        "RestApiId": {
          "Ref": "WebhookApi6CC9DD23",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "WebhookApiAccount2F69857D": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "WebhookApi6CC9DD23",
      ],
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "WebhookApiCloudWatchRole90C672AB",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "WebhookApiCloudWatchRole90C672AB": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "WebhookApiCustomDomain33E512A8": {
      "Properties": {
        "CertificateArn": {
          "Ref": "Certificate4E7ABB08",
        },
        "DomainName": "hooks.example.com",
        "EndpointConfiguration": {
          "Types": [
            "EDGE",
          ],
        },
      },
      "Type": "AWS::ApiGateway::DomainName",
    },
    "WebhookApiCustomDomainMapStackWebhookApi549DBB5E3AB37164": {
      "Properties": {
        "DomainName": {
          "Ref": "WebhookApiCustomDomain33E512A8",
        },
        "RestApiId": {
          "Ref": "WebhookApi6CC9DD23",
        },
        "Stage": {
          "Ref": "WebhookApiDeploymentStageprod189573F5",
        },
      },
      "Type": "AWS::ApiGateway::BasePathMapping",
    },
    "WebhookApiDeployment78952FFB8bdf379f09cc6c4b7437d486e452e7dc": {
      "DependsOn": [
        "WebhookApiproxyANYE78275E3",
        "WebhookApiproxyB64A6FF2",
        "WebhookApiANYC724D9C3",
      ],
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "WebhookApi6CC9DD23",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "WebhookApiDeploymentStageprod189573F5": {
      "DependsOn": [
        "WebhookApiAccount2F69857D",
      ],
      "Properties": {
        "DeploymentId": {
          "Ref": "WebhookApiDeployment78952FFB8bdf379f09cc6c4b7437d486e452e7dc",
        },
        "RestApiId": {
          "Ref": "WebhookApi6CC9DD23",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "WebhookApiRecordF9471B97": {
      "Properties": {
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "WebhookApiCustomDomain33E512A8",
              "DistributionDomainName",
            ],
          },
          "HostedZoneId": {
            "Fn::GetAtt": [
              "WebhookApiCustomDomain33E512A8",
              "DistributionHostedZoneId",
            ],
          },
        },
        "HostedZoneId": "/hostedzone/ABCDEF12345678",
        "Name": "hooks.example.com.",
        "Type": "A",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "WebhookApiWebhookReceiverLambdaE8B7F832": {
      "DependsOn": [
        "WebhookApiWebhookReceiverLambdaServiceRoleDefaultPolicyB421A631",
        "WebhookApiWebhookReceiverLambdaServiceRole11D4E583",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "<sha256-placeholder>.zip",
        },
        "Environment": {
          "Variables": {
            "GITHUB_APP_ID": "123456",
            "SECRET_NAME": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Fn::Select": [
                      0,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Fn::Select": [
                              6,
                              {
                                "Fn::Split": [
                                  ":",
                                  {
                                    "Ref": "WebhookTokenSecretBFD7CBC1",
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    "Fn::Select": [
                      1,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Fn::Select": [
                              6,
                              {
                                "Fn::Split": [
                                  ":",
                                  {
                                    "Ref": "WebhookTokenSecretBFD7CBC1",
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                ],
              ],
            },
            "TABLE_NAME": {
              "Ref": "TableCD117FA1",
            },
          },
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "WebhookApiWebhookReceiverLambdaServiceRole11D4E583",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 10,
      },
      "Type": "AWS::Lambda::Function",
    },
    "WebhookApiWebhookReceiverLambdaLogRetentionBB26A972": {
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "WebhookApiWebhookReceiverLambdaE8B7F832",
              },
            ],
          ],
        },
        "RetentionInDays": 30,
        "ServiceToken": {
          "Fn::GetAtt": [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
            "Arn",
          ],
        },
      },
      "Type": "Custom::LogRetention",
    },
    "WebhookApiWebhookReceiverLambdaServiceRole11D4E583": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "WebhookApiWebhookReceiverLambdaServiceRoleDefaultPolicyB421A631": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "WebhookTokenSecretBFD7CBC1",
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "TableCD117FA1",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "WebhookApiWebhookReceiverLambdaServiceRoleDefaultPolicyB421A631",
        "Roles": [
          {
            "Ref": "WebhookApiWebhookReceiverLambdaServiceRole11D4E583",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "WebhookApiproxyANYApiPermissionStackWebhookApi549DBB5EANYproxyA8543061": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "WebhookApiWebhookReceiverLambdaE8B7F832",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "WebhookApi6CC9DD23",
              },
              "/",
              {
                "Ref": "WebhookApiDeploymentStageprod189573F5",
              },
              "/*/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "WebhookApiproxyANYApiPermissionTestStackWebhookApi549DBB5EANYproxy8D436FC7": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "WebhookApiWebhookReceiverLambdaE8B7F832",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "WebhookApi6CC9DD23",
              },
              "/test-invoke-stage/*/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "WebhookApiproxyANYE78275E3": {
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "ANY",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "WebhookApiWebhookReceiverLambdaE8B7F832",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": {
          "Ref": "WebhookApiproxyB64A6FF2",
        },
        "RestApiId": {
          "Ref": "WebhookApi6CC9DD23",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "WebhookApiproxyB64A6FF2": {
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "WebhookApi6CC9DD23",
            "RootResourceId",
          ],
        },
        "PathPart": "{proxy+}",
        "RestApiId": {
          "Ref": "WebhookApi6CC9DD23",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "WebhookTokenSecretBFD7CBC1": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "Description": "Secret token used for validating webhook requests from GitHub",
        "GenerateSecretString": {},
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`SfnProwlerTask should match snapshot 1`] = `
{
  "Mappings": {
    "LatestNodeRuntimeMap": {
      "af-south-1": {
        "value": "nodejs20.x",
      },
      "ap-east-1": {
        "value": "nodejs20.x",
      },
      "ap-northeast-1": {
        "value": "nodejs20.x",
      },
      "ap-northeast-2": {
        "value": "nodejs20.x",
      },
      "ap-northeast-3": {
        "value": "nodejs20.x",
      },
      "ap-south-1": {
        "value": "nodejs20.x",
      },
      "ap-south-2": {
        "value": "nodejs20.x",
      },
      "ap-southeast-1": {
        "value": "nodejs20.x",
      },
      "ap-southeast-2": {
        "value": "nodejs20.x",
      },
      "ap-southeast-3": {
        "value": "nodejs20.x",
      },
      "ap-southeast-4": {
        "value": "nodejs20.x",
      },
      "ap-southeast-5": {
        "value": "nodejs20.x",
      },
      "ap-southeast-7": {
        "value": "nodejs20.x",
      },
      "ca-central-1": {
        "value": "nodejs20.x",
      },
      "ca-west-1": {
        "value": "nodejs20.x",
      },
      "cn-north-1": {
        "value": "nodejs18.x",
      },
      "cn-northwest-1": {
        "value": "nodejs18.x",
      },
      "eu-central-1": {
        "value": "nodejs20.x",
      },
      "eu-central-2": {
        "value": "nodejs20.x",
      },
      "eu-isoe-west-1": {
        "value": "nodejs18.x",
      },
      "eu-north-1": {
        "value": "nodejs20.x",
      },
      "eu-south-1": {
        "value": "nodejs20.x",
      },
      "eu-south-2": {
        "value": "nodejs20.x",
      },
      "eu-west-1": {
        "value": "nodejs20.x",
      },
      "eu-west-2": {
        "value": "nodejs20.x",
      },
      "eu-west-3": {
        "value": "nodejs20.x",
      },
      "il-central-1": {
        "value": "nodejs20.x",
      },
      "me-central-1": {
        "value": "nodejs20.x",
      },
      "me-south-1": {
        "value": "nodejs20.x",
      },
      "mx-central-1": {
        "value": "nodejs20.x",
      },
      "sa-east-1": {
        "value": "nodejs20.x",
      },
      "us-east-1": {
        "value": "nodejs20.x",
      },
      "us-east-2": {
        "value": "nodejs20.x",
      },
      "us-gov-east-1": {
        "value": "nodejs18.x",
      },
      "us-gov-west-1": {
        "value": "nodejs18.x",
      },
      "us-iso-east-1": {
        "value": "nodejs18.x",
      },
      "us-iso-west-1": {
        "value": "nodejs18.x",
      },
      "us-isob-east-1": {
        "value": "nodejs18.x",
      },
      "us-west-1": {
        "value": "nodejs20.x",
      },
      "us-west-2": {
        "value": "nodejs20.x",
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "AWS679f53fac002430cb0da5b7982bd22872D164C4C": {
      "DependsOn": [
        "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "<sha256-placeholder>.zip",
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
            "Arn",
          ],
        },
        "Runtime": {
          "Fn::FindInMap": [
            "LatestNodeRuntimeMap",
            {
              "Ref": "AWS::Region",
            },
            "value",
          ],
        },
        "Timeout": 120,
      },
      "Type": "AWS::Lambda::Function",
    },
    "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ClusterEB0386A7": {
      "Type": "AWS::ECS::Cluster",
    },
    "ClusterVpcFAA3CEDF": {
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stack/Cluster/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "ClusterVpcIGW1E358A6E": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stack/Cluster/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "ClusterVpcPrivateSubnet1DefaultRoute3B4D40DD": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "ClusterVpcPublicSubnet1NATGateway0693C346",
        },
        "RouteTableId": {
          "Ref": "ClusterVpcPrivateSubnet1RouteTable5AAEDA3F",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "ClusterVpcPrivateSubnet1RouteTable5AAEDA3F": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stack/Cluster/Vpc/PrivateSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "ClusterVpcFAA3CEDF",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "ClusterVpcPrivateSubnet1RouteTableAssociation9B8A88D9": {
      "Properties": {
        "RouteTableId": {
          "Ref": "ClusterVpcPrivateSubnet1RouteTable5AAEDA3F",
        },
        "SubnetId": {
          "Ref": "ClusterVpcPrivateSubnet1SubnetA4EB481A",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "ClusterVpcPrivateSubnet1SubnetA4EB481A": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.128.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          {
            "Key": "Name",
            "Value": "Stack/Cluster/Vpc/PrivateSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "ClusterVpcFAA3CEDF",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "ClusterVpcPrivateSubnet2DefaultRoute011666AF": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "ClusterVpcPublicSubnet2NATGateway00B24686",
        },
        "RouteTableId": {
          "Ref": "ClusterVpcPrivateSubnet2RouteTable73064A66",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "ClusterVpcPrivateSubnet2RouteTable73064A66": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stack/Cluster/Vpc/PrivateSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "ClusterVpcFAA3CEDF",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "ClusterVpcPrivateSubnet2RouteTableAssociationFB21349E": {
      "Properties": {
        "RouteTableId": {
          "Ref": "ClusterVpcPrivateSubnet2RouteTable73064A66",
        },
        "SubnetId": {
          "Ref": "ClusterVpcPrivateSubnet2SubnetBD1ECB6E",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "ClusterVpcPrivateSubnet2SubnetBD1ECB6E": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.192.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          {
            "Key": "Name",
            "Value": "Stack/Cluster/Vpc/PrivateSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "ClusterVpcFAA3CEDF",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "ClusterVpcPublicSubnet1DefaultRoute62DA4B4B": {
      "DependsOn": [
        "ClusterVpcVPCGW47AC17E9",
      ],
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "ClusterVpcIGW1E358A6E",
        },
        "RouteTableId": {
          "Ref": "ClusterVpcPublicSubnet1RouteTable5594A636",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "ClusterVpcPublicSubnet1EIP433C56EE": {
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stack/Cluster/Vpc/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "ClusterVpcPublicSubnet1NATGateway0693C346": {
      "DependsOn": [
        "ClusterVpcPublicSubnet1DefaultRoute62DA4B4B",
        "ClusterVpcPublicSubnet1RouteTableAssociation0FBEF1F4",
      ],
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "ClusterVpcPublicSubnet1EIP433C56EE",
            "AllocationId",
          ],
        },
        "SubnetId": {
          "Ref": "ClusterVpcPublicSubnet1SubnetA9F7E0A5",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stack/Cluster/Vpc/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "ClusterVpcPublicSubnet1RouteTable5594A636": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stack/Cluster/Vpc/PublicSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "ClusterVpcFAA3CEDF",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "ClusterVpcPublicSubnet1RouteTableAssociation0FBEF1F4": {
      "Properties": {
        "RouteTableId": {
          "Ref": "ClusterVpcPublicSubnet1RouteTable5594A636",
        },
        "SubnetId": {
          "Ref": "ClusterVpcPublicSubnet1SubnetA9F7E0A5",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "ClusterVpcPublicSubnet1SubnetA9F7E0A5": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.0.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          {
            "Key": "Name",
            "Value": "Stack/Cluster/Vpc/PublicSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "ClusterVpcFAA3CEDF",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "ClusterVpcPublicSubnet2DefaultRoute97446C8A": {
      "DependsOn": [
        "ClusterVpcVPCGW47AC17E9",
      ],
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "ClusterVpcIGW1E358A6E",
        },
        "RouteTableId": {
          "Ref": "ClusterVpcPublicSubnet2RouteTable7B43F18C",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "ClusterVpcPublicSubnet2EIP203DF3E5": {
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stack/Cluster/Vpc/PublicSubnet2",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "ClusterVpcPublicSubnet2NATGateway00B24686": {
      "DependsOn": [
        "ClusterVpcPublicSubnet2DefaultRoute97446C8A",
        "ClusterVpcPublicSubnet2RouteTableAssociation8446B27D",
      ],
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "ClusterVpcPublicSubnet2EIP203DF3E5",
            "AllocationId",
          ],
        },
        "SubnetId": {
          "Ref": "ClusterVpcPublicSubnet2Subnet059113C4",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stack/Cluster/Vpc/PublicSubnet2",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "ClusterVpcPublicSubnet2RouteTable7B43F18C": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stack/Cluster/Vpc/PublicSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "ClusterVpcFAA3CEDF",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "ClusterVpcPublicSubnet2RouteTableAssociation8446B27D": {
      "Properties": {
        "RouteTableId": {
          "Ref": "ClusterVpcPublicSubnet2RouteTable7B43F18C",
        },
        "SubnetId": {
          "Ref": "ClusterVpcPublicSubnet2Subnet059113C4",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "ClusterVpcPublicSubnet2Subnet059113C4": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.64.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          {
            "Key": "Name",
            "Value": "Stack/Cluster/Vpc/PublicSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "ClusterVpcFAA3CEDF",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "ClusterVpcVPCGW47AC17E9": {
      "Properties": {
        "InternetGatewayId": {
          "Ref": "ClusterVpcIGW1E358A6E",
        },
        "VpcId": {
          "Ref": "ClusterVpcFAA3CEDF",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
    "ProwlerTaskFargateTaskSecurityGroupAAF49A89": {
      "Properties": {
        "GroupDescription": "Stack/ProwlerTask/FargateTask/SecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": {
          "Ref": "ClusterVpcFAA3CEDF",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ProwlerTaskProwlerAdditionalPolicy894379D3": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "securityhub:BatchImportFindings",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:securityhub:",
                    {
                      "Ref": "AWS::Region",
                    },
                    "::product/prowler/prowler",
                  ],
                ],
              },
            },
            {
              "Action": "securityhub:GetFindings",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "account:Get*",
                "appstream:Describe*",
                "appstream:List*",
                "backup:List*",
                "cloudtrail:GetInsightSelectors",
                "codeartifact:List*",
                "codebuild:BatchGet*",
                "cognito-idp:GetUserPoolMfaConfig",
                "dlm:Get*",
                "drs:Describe*",
                "ds:Describe*",
                "ds:Get*",
                "ds:List*",
                "dynamodb:GetResourcePolicy",
                "ec2:GetEbsEncryptionByDefault",
                "ec2:GetInstanceMetadataDefaults",
                "ec2:GetSnapshotBlockPublicAccessState",
                "ecr:Describe*",
                "ecr:GetRegistryScanningConfiguration",
                "elasticfilesystem:DescribeBackupPolicy",
                "glue:GetConnections",
                "glue:GetSecurityConfiguration*",
                "glue:SearchTables",
                "lambda:GetFunction*",
                "lightsail:GetRelationalDatabases",
                "logs:FilterLogEvents",
                "macie2:GetMacieSession",
                "s3:GetAccountPublicAccessBlock",
                "shield:DescribeProtection",
                "shield:GetSubscriptionState",
                "ssm-incidents:List*",
                "ssm:GetDocument",
                "support:Describe*",
                "tag:GetTagKeys",
                "wellarchitected:List*",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "apigateway:GET",
              "Effect": "Allow",
              "Resource": [
                "arn:aws:apigateway:*::/restapis/*",
                "arn:aws:apigateway:*::/apis/*",
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ProwlerTaskProwlerAdditionalPolicy894379D3",
        "Roles": [
          {
            "Ref": "ProwlerTaskTaskDefinitionTaskRoleDD250681",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ProwlerTaskSecurityHubProwlerIntegration5F0B21AF": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "ProwlerTaskSecurityHubProwlerIntegrationCustomResourcePolicy81A94EC0",
      ],
      "Properties": {
        "Create": {
          "Fn::Join": [
            "",
            [
              "{"service":"SecurityHub","action":"enableImportFindingsForProduct","parameters":{"ProductArn":"arn:aws:securityhub:",
              {
                "Ref": "AWS::Region",
              },
              "::product/prowler/prowler"},"physicalResourceId":{"id":"",
              {
                "Ref": "AWS::Region",
              },
              ""}}",
            ],
          ],
        },
        "Delete": {
          "Fn::Join": [
            "",
            [
              "{"service":"SecurityHub","action":"disableImportFindingsForProduct","parameters":{"ProductSubscriptionArn":"arn:aws:securityhub:",
              {
                "Ref": "AWS::Region",
              },
              "::product-subscription/prowler/prowler"}}",
            ],
          ],
        },
        "InstallLatestAwsSdk": true,
        "ServiceToken": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn",
          ],
        },
      },
      "Type": "Custom::AWS",
      "UpdateReplacePolicy": "Delete",
    },
    "ProwlerTaskSecurityHubProwlerIntegrationCustomResourcePolicy81A94EC0": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "securityhub:EnableImportFindingsForProduct",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:securityhub:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":hub/default",
                  ],
                ],
              },
            },
            {
              "Action": "securityhub:DisableImportFindingsForProduct",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:securityhub:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":hub/default",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ProwlerTaskSecurityHubProwlerIntegrationCustomResourcePolicy81A94EC0",
        "Roles": [
          {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ProwlerTaskTaskDefinition0DB6CE90": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "aws",
              "-z",
              "--output-modes",
              "json-asff",
              "--region",
              {
                "Ref": "AWS::Region",
              },
              "--security-hub",
              "--status",
              "FAIL",
            ],
            "Essential": true,
            "Image": "toniblyx/prowler:4.3.6@sha256:ad8292c104d6416518426ced45548b086f608d66e7a254891ebfe28657f38281",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "ProwlerTaskTaskDefinitionmainLogGroupF9136294",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "prefix",
              },
            },
            "Name": "main",
          },
        ],
        "Cpu": "1024",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "ProwlerTaskTaskDefinitionExecutionRole9072CDF9",
            "Arn",
          ],
        },
        "Family": "StackProwlerTaskTaskDefinition29B44A1B",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "ProwlerTaskTaskDefinitionTaskRoleDD250681",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "ProwlerTaskTaskDefinitionExecutionRole9072CDF9": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ProwlerTaskTaskDefinitionExecutionRoleDefaultPolicy48E9AD56": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ProwlerTaskTaskDefinitionmainLogGroupF9136294",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ProwlerTaskTaskDefinitionExecutionRoleDefaultPolicy48E9AD56",
        "Roles": [
          {
            "Ref": "ProwlerTaskTaskDefinitionExecutionRole9072CDF9",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ProwlerTaskTaskDefinitionTaskRoleDD250681": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/SecurityAudit",
              ],
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/job-function/ViewOnlyAccess",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ProwlerTaskTaskDefinitionmainLogGroupF9136294": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 14,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`WebSocketApi should match snapshot 1`] = `
{
  "Mappings": {
    "LatestNodeRuntimeMap": {
      "af-south-1": {
        "value": "nodejs20.x",
      },
      "ap-east-1": {
        "value": "nodejs20.x",
      },
      "ap-northeast-1": {
        "value": "nodejs20.x",
      },
      "ap-northeast-2": {
        "value": "nodejs20.x",
      },
      "ap-northeast-3": {
        "value": "nodejs20.x",
      },
      "ap-south-1": {
        "value": "nodejs20.x",
      },
      "ap-south-2": {
        "value": "nodejs20.x",
      },
      "ap-southeast-1": {
        "value": "nodejs20.x",
      },
      "ap-southeast-2": {
        "value": "nodejs20.x",
      },
      "ap-southeast-3": {
        "value": "nodejs20.x",
      },
      "ap-southeast-4": {
        "value": "nodejs20.x",
      },
      "ap-southeast-5": {
        "value": "nodejs20.x",
      },
      "ap-southeast-7": {
        "value": "nodejs20.x",
      },
      "ca-central-1": {
        "value": "nodejs20.x",
      },
      "ca-west-1": {
        "value": "nodejs20.x",
      },
      "cn-north-1": {
        "value": "nodejs18.x",
      },
      "cn-northwest-1": {
        "value": "nodejs18.x",
      },
      "eu-central-1": {
        "value": "nodejs20.x",
      },
      "eu-central-2": {
        "value": "nodejs20.x",
      },
      "eu-isoe-west-1": {
        "value": "nodejs18.x",
      },
      "eu-north-1": {
        "value": "nodejs20.x",
      },
      "eu-south-1": {
        "value": "nodejs20.x",
      },
      "eu-south-2": {
        "value": "nodejs20.x",
      },
      "eu-west-1": {
        "value": "nodejs20.x",
      },
      "eu-west-2": {
        "value": "nodejs20.x",
      },
      "eu-west-3": {
        "value": "nodejs20.x",
      },
      "il-central-1": {
        "value": "nodejs20.x",
      },
      "me-central-1": {
        "value": "nodejs20.x",
      },
      "me-south-1": {
        "value": "nodejs20.x",
      },
      "mx-central-1": {
        "value": "nodejs20.x",
      },
      "sa-east-1": {
        "value": "nodejs20.x",
      },
      "us-east-1": {
        "value": "nodejs20.x",
      },
      "us-east-2": {
        "value": "nodejs20.x",
      },
      "us-gov-east-1": {
        "value": "nodejs18.x",
      },
      "us-gov-west-1": {
        "value": "nodejs18.x",
      },
      "us-iso-east-1": {
        "value": "nodejs18.x",
      },
      "us-iso-west-1": {
        "value": "nodejs18.x",
      },
      "us-isob-east-1": {
        "value": "nodejs18.x",
      },
      "us-west-1": {
        "value": "nodejs20.x",
      },
      "us-west-2": {
        "value": "nodejs20.x",
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "Certificate4E7ABB08": {
      "Properties": {
        "DomainName": "*.example.com",
        "DomainValidationOptions": [
          {
            "DomainName": "*.example.com",
            "HostedZoneId": "/hostedzone/ABCDEF12345678",
          },
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stack/Certificate",
          },
        ],
        "ValidationMethod": "DNS",
      },
      "Type": "AWS::CertificateManager::Certificate",
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A": {
      "DependsOn": [
        "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
        "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "<sha256-placeholder>.zip",
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
            "Arn",
          ],
        },
        "Runtime": {
          "Fn::FindInMap": [
            "LatestNodeRuntimeMap",
            {
              "Ref": "AWS::Region",
            },
            "value",
          ],
        },
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:PutRetentionPolicy",
                "logs:DeleteRetentionPolicy",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
        "Roles": [
          {
            "Ref": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "WebSocketApi32E01B6B": {
      "Properties": {
        "DisableExecuteApiEndpoint": true,
        "Name": "WebSocketApi",
        "ProtocolType": "WEBSOCKET",
        "RouteSelectionExpression": "$request.body.action",
      },
      "Type": "AWS::ApiGatewayV2::Api",
    },
    "WebSocketApiApiMapping85AE08E7": {
      "DependsOn": [
        "WebSocketApiStageC51B50DA",
      ],
      "Properties": {
        "ApiId": {
          "Ref": "WebSocketApi32E01B6B",
        },
        "DomainName": {
          "Ref": "WebSocketApiDomainName828AC440",
        },
        "Stage": "prod",
      },
      "Type": "AWS::ApiGatewayV2::ApiMapping",
    },
    "WebSocketApiConnectLambda7AF9AEA8": {
      "DependsOn": [
        "WebSocketApiConnectLambdaServiceRoleDefaultPolicyAB263650",
        "WebSocketApiConnectLambdaServiceRole1D3E97E8",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "<sha256-placeholder>.zip",
        },
        "Environment": {
          "Variables": {
            "STORE_AUTHORIZER_PROPERTIES": "false",
            "TABLE_NAME": {
              "Ref": "WebSocketApiConnectionTable25CA1A9B",
            },
          },
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "WebSocketApiConnectLambdaServiceRole1D3E97E8",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 10,
      },
      "Type": "AWS::Lambda::Function",
    },
    "WebSocketApiConnectLambdaLogRetentionED06EF0B": {
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "WebSocketApiConnectLambda7AF9AEA8",
              },
            ],
          ],
        },
        "RetentionInDays": 30,
        "ServiceToken": {
          "Fn::GetAtt": [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
            "Arn",
          ],
        },
      },
      "Type": "Custom::LogRetention",
    },
    "WebSocketApiConnectLambdaServiceRole1D3E97E8": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "WebSocketApiConnectLambdaServiceRoleDefaultPolicyAB263650": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "WebSocketApiConnectionTable25CA1A9B",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "WebSocketApiConnectLambdaServiceRoleDefaultPolicyAB263650",
        "Roles": [
          {
            "Ref": "WebSocketApiConnectLambdaServiceRole1D3E97E8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "WebSocketApiConnectionTable25CA1A9B": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "connectionId",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "connectionId",
            "KeyType": "HASH",
          },
        ],
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Delete",
    },
    "WebSocketApiDisconnectLambdaC2566805": {
      "DependsOn": [
        "WebSocketApiDisconnectLambdaServiceRoleDefaultPolicy2606D261",
        "WebSocketApiDisconnectLambdaServiceRoleF93168A3",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "<sha256-placeholder>.zip",
        },
        "Environment": {
          "Variables": {
            "TABLE_NAME": {
              "Ref": "WebSocketApiConnectionTable25CA1A9B",
            },
          },
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "WebSocketApiDisconnectLambdaServiceRoleF93168A3",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 10,
      },
      "Type": "AWS::Lambda::Function",
    },
    "WebSocketApiDisconnectLambdaLogRetention0D35F4B0": {
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "WebSocketApiDisconnectLambdaC2566805",
              },
            ],
          ],
        },
        "RetentionInDays": 30,
        "ServiceToken": {
          "Fn::GetAtt": [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
            "Arn",
          ],
        },
      },
      "Type": "Custom::LogRetention",
    },
    "WebSocketApiDisconnectLambdaServiceRoleDefaultPolicy2606D261": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "WebSocketApiConnectionTable25CA1A9B",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "WebSocketApiDisconnectLambdaServiceRoleDefaultPolicy2606D261",
        "Roles": [
          {
            "Ref": "WebSocketApiDisconnectLambdaServiceRoleF93168A3",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "WebSocketApiDisconnectLambdaServiceRoleF93168A3": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "WebSocketApiDomainName828AC440": {
      "Properties": {
        "DomainName": "socket.example.com",
        "DomainNameConfigurations": [
          {
            "CertificateArn": {
              "Ref": "Certificate4E7ABB08",
            },
            "EndpointType": "REGIONAL",
          },
        ],
      },
      "Type": "AWS::ApiGatewayV2::DomainName",
    },
    "WebSocketApiRecordE0537A52": {
      "Properties": {
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "WebSocketApiDomainName828AC440",
              "RegionalDomainName",
            ],
          },
          "HostedZoneId": {
            "Fn::GetAtt": [
              "WebSocketApiDomainName828AC440",
              "RegionalHostedZoneId",
            ],
          },
        },
        "HostedZoneId": "/hostedzone/ABCDEF12345678",
        "Name": "socket.example.com.",
        "Type": "A",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "WebSocketApiStageC51B50DA": {
      "Properties": {
        "ApiId": {
          "Ref": "WebSocketApi32E01B6B",
        },
        "AutoDeploy": true,
        "StageName": "prod",
      },
      "Type": "AWS::ApiGatewayV2::Stage",
    },
    "WebSocketApiconnectRoute7893AC79": {
      "Properties": {
        "ApiId": {
          "Ref": "WebSocketApi32E01B6B",
        },
        "AuthorizationType": "NONE",
        "RouteKey": "$connect",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "WebSocketApiconnectRouteConnectIntegrationB57148FA",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "WebSocketApiconnectRouteConnectIntegrationB57148FA": {
      "Properties": {
        "ApiId": {
          "Ref": "WebSocketApi32E01B6B",
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "WebSocketApiConnectLambda7AF9AEA8",
                  "Arn",
                ],
              },
              "/invocations",
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Integration",
    },
    "WebSocketApiconnectRouteConnectIntegrationPermissionE699A6A3": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "WebSocketApiConnectLambda7AF9AEA8",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "WebSocketApi32E01B6B",
              },
              "/*$connect",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "WebSocketApidisconnectRoute9D90B85D": {
      "Properties": {
        "ApiId": {
          "Ref": "WebSocketApi32E01B6B",
        },
        "AuthorizationType": "NONE",
        "RouteKey": "$disconnect",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "WebSocketApidisconnectRouteDisconnectIntegration125B6C49",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "WebSocketApidisconnectRouteDisconnectIntegration125B6C49": {
      "Properties": {
        "ApiId": {
          "Ref": "WebSocketApi32E01B6B",
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "WebSocketApiDisconnectLambdaC2566805",
                  "Arn",
                ],
              },
              "/invocations",
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Integration",
    },
    "WebSocketApidisconnectRouteDisconnectIntegrationPermission3D5EA087": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "WebSocketApiDisconnectLambdaC2566805",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "WebSocketApi32E01B6B",
              },
              "/*$disconnect",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
